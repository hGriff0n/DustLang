
## LCS(i, j) is the length of the longest common subsequence of sequences X[0..i] and Y[0..j]
## If we allow 0 to indicate the null sequence then L[0, j] = 0 and L[i, 0] = 0				## done
## Then L[i,j]: x[i] = y[j] and L[i-1, j-1] + 1 or max(L[i-1,j], L[i, j-1])

## This file is regarding the implementation in two possible syntaxes, [i][j] and [i, j]
## [i][j] is well defined within the specification as being two table lookups
## [i, j] currently holds no syntactical definition aside from creating a table with i and j as elements (but not for table access)
## In both cases, the syntax is being used to find the LCS between the first i characters of X and the first j characters of Y

## Longest Common Subsequence implemented in [i][j] syntax
LCS: [													## The core idea is that LCS[i] should always go through _index
	let 0: [ _nindex: \ -> 0 ],							## The memorization of results happens in the table that is stored at LCS[i]
	_index: \n -> self[n],
]

def LCS.newrow(seq1, seq2, idx)							## This process can probably be simplified
	Table.memoize([
			let i: idx,
			let xi: seq1[idx],
			let y: seq2,
			mem_fn: \j -> j = 0 and 0 or xi = y[j] and LCS[i - 1][j - 1] + 1 or max(LCS[i - 1][j], LCS[i][j - 1]),
		])

def LCS.init(x, y)
	self.removeIf(\k -> k != 0 and k != "mem_fn" and !ismetamethod(k))		## or should Table.memorize add "mem_fn" to the "metamethod" list ???
	for i in [1..size(x)]									## This process can probably be simplified
		self[#self]: self.newrow(x, y, i)					## relying on #self = size(self) and self[#self - 1] = lst(self)
	self._nindex: \ -> self[0]

## print(LCS[2][4])

## Longest Common Subsequence implemented in [i, j] syntax
LCS: Table.memoize([
	mem_fn: \[i,j] -> [i, j] ^ 0 and 0 or x[i] = y[j] and self[i-1, j-1] + 1 or max(self[i-1, j], self[i, j-1]),
	init: \s1, s2 ->
		self.removeIf \k,v -> k != "mem_fn" and !ismetamethod(k,v)		## removes everything but the defined metamethods (ie. previous iterations)
		set(self, "x", s1)
		set(self, "y", s2)
])

## print(LCS[2,4])

## Longest Common Subsequence implemented in [i, j] syntax but using a pattern matched _index
## Internally LCS stores it's table like in the first example (this example just takes less liberties with syntax)

LCS: [
	mem_fn: \[i, j] -> [i, j] ^ 0 and 0 or x[i] = y[j] and self[[i - 1, j - 1]] + 1 or max(self[[i - 1, j]], self[[i, j - 1]]),
	_op(): \t, *ot -> self[t + ot],						## small trick to allow LCS(2, 4) = LCS([2, 4])
	x: "", y: ""										## What about let x, y <- Indexable ???
]

## Is this (Indexable) a possible way of allowing strings and tables to be used in this ???
def LCS.init(s1 <- Indexable, s2 <- Indexable)			## The "<- Indexable"s are unnecessary if x and y are statically typed
	self.removeIf \k -> !(k <- String)
	x, y: s1, s2

LCS: Table.memoize(LCS)

## print(LCS[[2, 4]])		The syntax is much nicer if we define _op()_
## print(LCS([2, 4]) = LCS(2, 4))		True!