
Dust Type System

Notes on Shorthand
	Given types 'a' and 'b'
		a < b indicates that a is a child of b					## These may end up becoming part of the language syntax/semantics
		a = b indicates that a is the same type as b
		a -> b indicates that a is convertible to b
		[a, b] is the set of all types c, where a <= c and c <= b
	For any variable 'v'
		'd' is the dynamic type of the variable
		's' is the static type of the variable

Variables
	Dust is a strongly typed language
		The type of variables and values is of primary importance to the interpreter
			However, the interpreter is very quick to implicitly convert values if necessary
		Typing is primarily concerned with values, not variables			## For now at least

	By default, variables in dust can store values of any type
		This is accomplished largely through the NIL type (the default type of all variables)
			This is mirrored in the default value being nil (the only instance of the Nil type)
			Nil acts as little more than a "vacancy" sign for the purposes of variable assignment

	It is possible to "statically" type variables							## Not implemented
		Static typing works in two ways
			By ensuring that the given variable can only hold values of type t, where t <= s or t -> s
				Variable and Value both have a type_id field to facilitate this runtime checking
			By ensuring that the given variable holds a usable value (ie. not nil)
				Partially a side effect of nil being the only instance of Nil and Nil being a "parent" type

		It is the second assurance that is the major point of dust static typing
			There is no current push to use this typing information to perform code optimizations (the language is extremely dynamic at the moment)
			Static typing variables (not in function declarations) could throw an error if the variable was uninitialized

Inheritance and the Type Heirarchy
	Dust uses singular inheritance for its type system
		One problem right now with how to specify interfaces
			Dust is fairly duck-typed so it's not an issue code wise, but I would like the self-commenting aspects

	Inheritance dispatch
		A method is considered inherited if it's definition can only be found in a type t, where t > d
			A method that is defined on the type is considered locally/immediately defined (t = d)
				However as a matter of implementation, locally defined methods are "inherited" (Custom types are implemented as tables)

		Inheritance dispatch seeks to find the type t, t >= d, where the given method is locally defined
			Dispatch results in NIL if the given method is not defined in [a, Object]

Common Type and Operator dispatch
	Operators are implemented as type-level metamethods
		Thusly the semantics of operators can be defined (and modified) for individual types
		Dust operators only work on the same type, so String._op+ will only be called with two strings
		However, operators can be used between two items of different types if there is a converter, a way to convert from one to the another
			So "\"Hello\" + 5" will first result in "5.String()" being called before String._op+() is evaluated
			The process that determines which operator gets invoked (and which value gets converted) is "Common Type Resolution"

	Common Type Resolution (CTR)
		The Common Type of two types a, b is a type t where one of the following holds true
			a -> b or b -> a (Conversion standard)
				This rule tries to get the closest to the intended action without losing information (This is tried first)
				However if a -> b and b -> a, then CTR must pick one through precedence evaluation
					Precedence calculation will be done through a first declared ordering
						It might be done through a "least recently declared" ordering
					Precedence is a relative figure (It's worthless to compare between different types)
						Precedence is also the biggest reason why inherited converters are ignored by CTR
				All types are implicitly convertible to Tables and this conversion has a higher precedence
			a < t and b < t
				t <= Object will always hold true as all custom types inherit from Object
					This type also gets memorized to improve future lookup				## CTR results are memorized however

		CTR is a transitive operation
			It doesn't consider the location of the operands when working
			So "3 + \"Hello\"" and "\"Hello\" + 3" both call String._op+()

		CTR does not consider whether a given type actually defines the desired method

Converters
	Converters are a type-level metamethod (similar to operators)
		A converter is defined in the from type and is named as the to type
			ie. Int -> String would be performed in the method Int.String()
			The name being equal to the to type is used by the interpreter to signify that a -> b