## For final release, rely more on sentences and paragraphs

Dust Language Manual
version 0.1.9

## Versioning rules
## [milestone versioning].[minor versioning].[change versioning]
## milestones: main release, breaking changes, new features		|	Break or alteration of the existing systems
## minor: new library, new features, bug fixes, optimization	|	Improvement over the existing systems
## change: optimization, bug fixes, code/manual changes			|	Update or rewording of existing systems

## Start with a compiler, move to an interpreter when able

Table of Contents
	1. Introduction
		1.1. Shorthand

	2. Organization
		2.1. Type System
		2.2. Scoping
		2.3. Control Structures

	3. System Types
		3.1. Tables
		3.2. Lambdas
		3.3. Functions
		3.4. Strings
		3.5. Numbers
		3.6. Expressions ???

	4. OOP and the Type Heirarchy

	5. Variables

	. Syntax


## Body

1. Introduction
	Welcome to the Dust Provisional Language Manual.

	Dust is, at the core, and expression based language although the language does provide many features and facilities that
	Enable various other pardigms such as OOP, functional, generic, imperative, etc.

	1.1. Shorthand
		Throughout this manual, I will make use of several shorthands to succiently describe
		The syntax and semantics of the dust language. These shorthands, and their meaning,
		Are provided here for the readers convience in reading this manual.

		Lexical tokens/constructs are specified by surrounding a word with '<>'
		Postpending a word with the suffix '_list' indicates a comma seperated sequence of the lexical construct

2. Organization
	The entry point for a dust program is the entrant-file, the file where evaluation is started/invoked. The interpreter will
	Then read through the file, expression-by-expression, evaluating the code as needed. 

	Scoping
		Various expressions can be grouped together by collecting them inside code blocks. Code blocks are primarily indicated
		Through indentation, although there does 

	Type System
		Dust for the most part uses a dynamic type system that relies on duck-typing to ensure semantical correctness. However
		Dust does provide the syntax and the ability to use optional static typing that restricts the set of values that a
		Variable can hold.

	2.1. Scope
		Scope in Dust is primarily indicated through the creation of "blocks".
	