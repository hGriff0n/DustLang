"Easy" function memorization

The naive implementaton of the fibonacci algorithm is that of its mathematical definition, ie.

	fib: \n -> [0, 1] ^ n and 1 or (fib(n - 1) + fib(n - 2))

However, this implementation is on the order of O(2^n). This causes fibonacci to often be used
As an entry point to the computational strategy of memorization. In other languages the process
Would be similar to (although this slightly optimizes the code by initializing the table)

	fibonacci: [1, 1]
	fib: \n -> fibonacci[n] or (fib(n - 1) + fib(n - 2))

However, in dust, this process can be further compacted (particularly to reduce variable pollution)
Through the use of table methods, particularly 'Table.memoize' (this was made on the spot and subject to change).

	fib: Table.memoize([1, 1, mem_fn: \x -> fib[n-1] + fib[n - 2]])			## freaks out at fib[-1]

The key "trick" here is the override of the '_nindex' method. Every time fib is accessed with a new index
(ie. a previously uncalculated argument), the '_nindex' method is invoked. It is in this method that the
Actual association of the index to the fibonacci number is performed. But since the method also relies upon
Table indexing to get its results, the entire sequence is calculated at most O(n), assuming no prior calculations.
Thus the results of the calculation are memorized almost automatically.

Tables as Functions

But note that the process mentioned above does not necessarily entail memorization of function values.
In fact, the syntax that the above entails is slightly, although not entirely, different from the syntax
For function calls, which the system emulates, instead sharing a resemblance to the syntax for table
Access, which the system is. But this syntactical dichtonomy is not a necessary part of the whole process
In fact, by taking advantage of another metamethod, the entire system can be totally abstracted so that
It uses the same syntax as functions, thus preserving the mental link between appearance and action.
The specific method is '_op()' which defines the semantics of () on the table object.

	fib: Table.memoize([1, 1, mem_fn: \x -> fib(n - 1) + fib(n - 2), _op(): \x -> fib[x]])
