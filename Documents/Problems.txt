How will functions work
	Particularly members vs. free vs. operators
		This is more of an attempt to generate a unified call syntax
	My current idea
		Try operators (due to the special behavior and typing requirements
		Try member functions
		Try table functions   (The implementation of table and member function lookup might be unifiable, lookup rules)
		Try free functions
		Try nil functions
		Throw exception
			It may be possible then that a.x() ~ x(a) (but not the reverse)

I might have to reconsider how I'm implementing objects/values/type system
	It was problems with inheritance and automatic "reducing" typing
		However, for the majority of the types that have inheritance, this "reduction" is nothing more than reduced scoping when accessing variables/methods
			This method of reduction is easily (or will be) served by current mechanics and rationale
			Reducing to Object (currently) removes all variables (works with all types and all implementations)
		The remaining question is how do basic types (such as Int, Float, and String) interact with the object heirarchy
			Their values are not stored in a table but in direct memory
			It would be very useful to define some operators for Int and Float in Number
			A custom type inheriting from String/Function/Table also needs to be handled (these basic types are referenc counted)
		However there are still many aspects that need to be solved beforehand
			How is intra-table referencing supposed to work (this isn't as necessary for immediate implementations, but the framework is still important for the future)
				## What do I even mean by this ???
	
_op() has similar naming convention to binary operators but is not a binary operator