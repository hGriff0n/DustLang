This file was originally created back in the early days when #Dust# was nothing more
Than a passing interest to me, a series of doodles of interesting syntax that while
Readable and aesthetically pleasing, were ultimately inconsistent and incomplete.
But while working on the actual language specification, much was changed from what
Was originally included within this document. During this process, I deleted everything
That was no longer relevant or valid from this file. I may be able to recover some of my
Original ideas from notes I have stashed around, but ultimately I fear that much has
Been lost. This process has occurred to all files while I waited for a specification
That I felt was complete and implementable. However, I have come to realize that no
Specification is really complete and that there is much value into my initial ramblings
And doodles. So now I finally move to Github as I morn my short-sightedness.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!symbolic programming
say numbers * x = bigger in scale
scale[numbers,bigger] = numbers,[4,8,12,16]
print scale.x			!!"2"

say f(x) = y in funcs
zeros = funcs{ y = 0 }	<- creates a new symbolic struct identical to funcs but with a constant value for y
zeros.f = f
print zeros.x			<- 1, -1
zeros.clear
print zeros.y			<- 0
<- need a way to set multiple values with one line/function
funcs.set{ y = 2, f = f }		<- will this do ???

say a^2 + b^2 = c^2 in pythagorean
pythagorean.a = 3
print pythagorean.b			<- sqrt c^2 - 9
print pythagorean.c			<- sqrt 9 + b^2
pythagorean.b = 4
print pythagorean.c			<- 5
pythagorean.clear
print pythagorean.a			<- sqrt c^2 - b^2

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!OOP style
!!proto (?)	-	metatables, error handling, data descriptors ???
		!!define behavior for nil ???

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!logic programming & type constraints
!!logic functions establish a relationship unless they end with a '?', in which case, they check if that relationship exists
type Indexable x
	has_method? x, index

is? x, Indexable	!!can 'x' be indexed?

type Any
	yes

type Shape x
	has_method? x, perimeter
	has_method? x, area
	
type Iterable x
	has_method? x, begin
	has_method? x, end
	same_type? begin, end
	
object rectangle(x,y)
	def perimeter as 2x + 2y
	def perimeter as x*y
	
is? rectangle, Any			!!Yes
is? rectangle, Shape		!!Yes
is? rectangle, Iterable		!!No

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!