This list doesn't seriously consider most whitespace
	Need to go through and add those considerations in

## Composition definitions (replace all mentions of # when defining a new definition. ie. a_list = <a>', <a>'*)
#_list = <#>', <#>'*

## Functional definitions
arg = <id>': <expr>'?' <- <type>'?						## '': <expr>'|' <- <type>''?
lambda = \<arg_list>? -> '<expr>|<block>'?				## <expr>|<block>|<curry>		\<id_list>? -> '<expr>|<block>'? if I want to disable some features for lambdas
function = def <var>(<arg_list>?) '<expr>|<block>'		## def <var><table>? '<expr>|<block>' if the "pattern match" syntax is adopted
call = <var>(<expr_list>?)								## <var>'(<expr_list>?)| <expr_list>'

## OOP definitions
object = type <type_id> <table> <inheritance>?			## can roll the inheritence bit in line (I just think it might improve parsing accuracy)
inheritance = ++ <type_list>

## Table definitions
table = [ <entry_list>? ]								## current definition doesn't "allow" for the trailing comma
entry = let? <var>: <expr>								## <assignment> ???

## Type definitions
typecheck = <var> <- <type>
int = '+|-'?[0-9]+
float = <int>.[0-9]*									## A float must be appended by an int. 1/4 = 0.25 (.25 is not valid or indexes a table/scope)
string = \".*\"											## "But what about \"This String\"!"

## Syntax definitions
assign = let? <var_list><assign_op> <expr_list>
assign_op = :<op>?
whitespace = \n| 
scope = \t
keyword = if|...
op = *|...
syntax = 

## Program definitions
file = <import>*'<block>|<expr>'*						## Note this restricts imports to the file beginning

## Unknown
id = [A-Za-z_][^<whitespace>]*
var_id = 
type_id = 

expr = .*
block = '\t'<expr>|<block>''+							##'\t<chunk>'+
chunk = <block>|<expr>									## since this pattern appears so frequently
var = <id>'\.<var>'*									## <id>'\.<field>'*		Currently this allows Int.String (but that might be useful for overloading)
