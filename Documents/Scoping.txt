How is scoping (and blocks) handled by the parser?
	Scoping and blocks are intimately related in dust
		A block is a collection of expressions that share the same scope
		Blocks are naturally an expression and can have sub-blocks

Continuation Expressions
	Any expression that uses {seps} can be written using multiple lines
		The parser will use the scope of the statement start when parsing the expression
			The code on following lines can be indented to any level
		I can also provide a {c_seps} that does the same functionality (keep {sep} = ' ')
	For table indexing, should the '.' immediately follow the table or can there be a {seps} in between
		This would be a minor step to allowing indexing to be a continuation expression
		ie. Should "foo() . bar . call()" parse correctly
			I could define this as having "Haskell" semantics too

Lookup rules (x) (slightly different for get/set)
	idx = SCOPE
		SCOPE.x (only check in SCOPE)
		SCOPE.self.x (can't get in set)
		par(SCOPE).x (check global scope)
	idx = SELF
		get -> SCOPE.self
		set -> SELF
	otherwise
		idx.x
		type(idx).x => self = idx

	Interaction with forced lookup (idx = SCOPE)
		SCOPE.x (filter through)