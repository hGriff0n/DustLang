
Table Declaration
	[ <entry_list>? ] where entry = '<id>:'? <expr>
	# Possible: [ <expr>* ] (It is the expression's job to assign the variable)
		# If the expression is not an assignment, the assignment is performed automatically

	The 'key' defaults to the next value of the range [1..] that is not already a key in the table
		Note that tables are 1 indexed by default
			Table keys can take on any value, this is only an assumption for the sake of standardization
			This behavior can be modified in-language by redefining global functions/metamethods

	Note that entry_list does not function like multiple assignment
		Inter-table referencing is permissable during declaration
			Should it be?
			ie. [ x: 3, y: x + 3 ] = [ x: 3, y: 6 ]

		Could this mean that multiple assignment is permissable within a table ???
			ie. [ x, y: 3, 6 ] = [ x: 3, y: 6 ]
			It might be useful to restrict this to enable easier parsing of pattern matching
				Allows the ':'/',' to differentiate between the two

Table access
	Table values are accessed through '.' and '[]'
		Only Int and String literals can be indexed through '.'
			The entire process of enabling '.' is basically a combination of
				Converting the raw text to String or Int literals (adding "" if String)
				Replacing the '.<literal>' with '[<literal>]'
					This implies that '.' is entirely a syntactic sugar
			Note: All numeric strings (ie. "1") require using '[]' (table.1 => table[1] not table["1"])

		Accessing a table with a variable can only be performed using '[]'
			Using '.' syntax would translate t.<var> to t["$var"]

	It should be possible to restrict the types of keys and values within a table
		int_arr: [ _keys: Int, _val: Int ]			## int_arr: [ _keys: _vals: Int ]
		int_arr: [ _keys: \x -> x <- Int, _val: _keys ]


Set Comprehension Syntax
	mult: [x * y | x in l, y in r, true]			## Note the 'true' is not needed

	General Syntax Form
		[<expr> | <extract_list>', <expr_list>'?]
			extract = <var> in <table>				## or <var> in <accessor> if the generator idiom is accepted

	This can possibly be implemented by translating to [\ -> x * y | x in l, r in r, true]
		This involves scoping/closure work however
		Also possible to translate to [\ -> * | x in l, r in r, true] (currying)

	Do these constructions implicitly work only on integer keys
		Or can they be used on string keys (This doesn't make much sense though)

Set Ranges
	Syntax
		[<start>', <second>'?..'<stop>'?', <lambda>'?]

	I'm using the same symbol for ranges and tables
		Technically ranges are just converted to tables
			They might be instead converted to generators (if this formulation is accepted)
				These would act similar to Haskell's lazy evaluation
			The syntax is just an easy way to specify a large series of 

	Semantics
		The range generates a table/generator that consists of the numbers >= <start> and <= <stop>
			ex. [1..5] = [1, 2, 3, 4, 5]
		The default increment used to generate the list is '+1' (or next if generalized)
			This increment can be implicitly changed by specifying the second value in the sequence
				This specification (currently) only works on a linear scale
				Changing the sign does not require a second value (<stop> < <start>)
					ex. [5..1] = [5, 4, 3, 2, 1]
		Ranges can be infinite in length (iff lazy evaluation is implemented)
			Just don't provide a value for <stop>
			ex. [1..] specifies the set of natural numbers
		More complex steps increments can be specified by providing a lambda
			Currently the lambda is passed the index where the value will be stored
			ex. [1..28, \x -> ^2] = [1, 4, 9, 16, 25]
				Or should this compute the first 28 squares ???
		Ranges work on variables (don't require literals)
			x: 5
			[1..x] = [1, 2, 3, 4, 5]

	Could I possibly generalize this rule to any type???
		ie. ['a'..'e'] = ['a', 'b', 'c', 'd', 'e']

		Require that the values are "Sequential" and "Orderable"
			Have 'next'/'prev' defined			## To generate the range
			Have 'op<' defined					## To automatically decrement/increment
			

Pattern Matching (Table specific syntax)
	[ <var_list> ]

	def add([x, y])
		x + y

	This is (roughly) equivalent to			## This translation doesn't care about input size
		def add(t <- Table)
			(\x, y -> x + y)(*t)			## Note that pattern matching (in this case) is just syntactical sugar

		The pattern will only match arrays of size 0, 1, or 2 (provided a pattern is not provided for those)
			It could be possible to define some functions that would accept non-arrays but I don't know how that would be well defined/consistent
			If an array of size 0 or 1 is passed, than the leftover "args" are assigned nil (much like normal function arg assignment)

		It is possible to have a pattern that accepts arrays of size 3+	using the splat operator
			def add([x, y, *_])

	Way to keep a reference to the original list?
		See the Haskell section on the syntax to see its usefulness

		def orig(t: [x, y, *_])			## This is the same as default value syntax
		def orig([x, y, *_] -> t)		## Similar to lambdas, but otherwise it's a unique construct (it can't be used in lambdas though)
		def orig(t[x, y, *_])			## Confusing syntax
		def orig([x, y, *_] and t)		## Very odd syntax. Might be a tad difficult to implement, but otherwise alright

	Pattern Matching in variable assignment
		t: [1, 2]
		[x, y]: t						## equivalent to x, y: *t

		Keep the idea around for later consideration (it is trivially easy to rewrite to established syntax)

	The code for pattern matching should be relatively referential
		If I can enable the syntax in table arguments, I can enable it in variable assignment

Interaction between tables and constant-ness (Metamethods and 'let' syntax)
	There's three different levels of constant-ness that can be contrived using tables
		Entries can be added but not changed (see NeatTricks memoize example)
			Use 'let' fields								## Generalization of the constant declarization rules (they're not exactly defined though)
				const_table: [ let x: 5	]

			For a more generalized (ie. table-wide) behavior
				_nindex: \x,y -> y and (let self[x]: y)		## wouldn't this call _nindex ???

			Or disable reassignment
				_index: \x -> self[x]						## const_table.x: 3 is const_table._index("x", 3) (maybe)

		Entries can be changed but not added
			Disable assignment by redefining the _nindex metamethod
				fixed_table: [
					_nindex: \ -> nil					## fixed by proxy
					_nindex: noAssign					## _newindex: nil (ie. is nil(x, y) valid syntax/semantics ???)
				]

		Entries can not be added or changed
			Use 'let' syntax (declare the table with let)	## This solution could also solve P1 behavior (most languages treat this as such)
				let immutable_table: []						## I feel that this option is simpler and more consistent however
			Disable reassignment and assignment by redefining _index and _nindex
				This is a combination to the above "solutions" 

	Can possibly extract some of the specific details to some outside function/factory/flag/metatmethod
		Automates the process of disabling _nindex/_index as shown in the first two solutions

In-line Multiline lambdas (where do blocks end???)
	Try to make it so that a multi-lined lambda only needs the default table seperator to be defined inline.
		Consider alternate syntax or restrictions if it is no possible

	test: [
		hello: \x ->
			if x <- String
				print("Hello " + x),				## hopefully this comma (and the indentation difference) is enough
		goodbye: \ -> print "Goodbye",
		op+: \x -> "Your name is " + x
	]

Table functions
	size(table)				## or go like Lua and have a size operator (op#)
	entries(table)			## returns a new table filled with the entries of the passed table (ie. entries(t).i = [i, t.i], roughly)
	flatten(table)			## Removes nesting in a list
	smooth(table)			## Reduces nesting in a list
	next(table, idx)		## Returns the next index (ie. t: [ 1, 2, 3, 5: 5 ]; next(t, 1) = t[2]; next(t, 4) = t[5])
	count: \t, elem -> size [x | x in t, x = elem]
		## \t, elem -> t.reduce \x, s -> s + Int(x = elem)

	smooth: \t -> !(ret: []) and for i in t .ret:+ i		## would this be allowed ???
	smooth: \t ->
		ret: []
		for i in t .ret:+ i

	def reduce(t <- Table, fn <- Function, sum)
		if !sum sum, t: fst(t), tail(t)
		for x in t .sum: fn(x, sum)

	def replicate(item, n <- Int)
		if n < 1 []											## I don't have to check if n exists!
		elseif n = 1 [item]
		else self(item, n / 2) + item + self(item, (n - 1) / 2)		## Int(n) = floor(n), Int converter gets called automatically

	has: \t,v -> t ^ v
	map: \t,fn -> [fn(x) | x in t]
	sum: \t -> t.reduce(\x, s -> x + s)
	entries: \t -> t.zip(t.keys, t.values)					## Might change the naming. Also, t.1 gives the key as opposed to t.key
	flip: \*t -> *(t.reverse())

Metamethods
	All syntactical operations basically boil down to calling specific functions, or metamethods
		These functions can be modified/defined to enable certain behaviors to be associated with certain syntax (such as the addition of two Ints using '+')
			In this case, the Int type table defines _op+ to do the addition
			The question is how should metamethods be handled with regards to literals
				Or I could have the "metamethoding" solved purely at runtime (through scoping-esque prcesses)
		All (default) metamethods are prepended by a single '_'

	There should be a way of explicitly disabling specific syntaxes
		Assigning an error function/nil seems like a good way

	Metamethods
		index, nindex, op(), op*, op+, op-, op/, op^, op=, order, assign(?)
			Need to add a section explaining what each metamethod is
		How to identify what is/isn't a new index

	Metatables
		Metatable is the general collection of metamethods for a particular table
			It's more of a useful idea for describing than an actual implementation detail
			Though it would be very useful (for standardization, etc.) to provide facilities that work on metatables
				Particularly set_metatable and get_metatable
				They would also imply have various functions that modify the metamethods (versus the old idea of metametamethods)

		Metatables are always be compared by reference
			It easier and simpler to implement and reason		## ie. How to compare functions

	factorial: Function.memoize([
			0: 1,
			fact: \x -> x < 0 and nil or x * self[x - 1]
		], "fact", true)				## handles memorization by routing through 'fact'. Also defines '()' to use memoization

	def Function.memoize(t <- Table, mem_fn: "mem_fn", call)				## Possible way to define "memoize"
		t and t._nindex: \*args -> self[mem_fn](*args)
		call and t._op(): \*args -> self[*args]
		return t
		
Table/Set operations
	All table operators ensure that all operands are tables
		This means that [] + 3 = [] + [3]

		Defining [] + 3 is easy, but how can I define 3 + []??
			Defining Table._op+ in a truly generic manner is the actual difficulty here

	let l, t: [1, 2, 3, 4], [3, 4, 5, 6,]

	Addition
		This would most likely have to be system defined in some form (table.append ???)

		Add just works by appending the two tables together
			For a set-based definition, see Union

		l + t = [1, 2, 3, 4, 3, 4, 5, 6]

	Subtraction (-)								## Removes all elements of one table from the other
		\l, r -> [x | x in l, !r.has(x)]

		l - t = [1, 2] = piecewiseSub(l, t)	## in this case
		t - l = [5, 6]

		To perform piecewise subtraction (ie. picewiseSub([2, 2], [2]) = [2])
			def piecewiseSub(t1 <- Table, t2)
				[replicate(e, t1.count(e) - t2.count(e)) | e in Set(t1)].flatten()			## replicate(e, < 0) = []. Assumes t2 is a table

				## if t2 not a table
				t1, p: t1 - t2, t1.count(t2)
				t1 + replicate(t2, p)

	Union (*)									## Takes the union of two tables
		\l,r -> Set(l + r)						## \l, r - > l + (r - l)			This preserves duplicates in l but not r

		l * t = [1, 2, 3, 4, 5, 6]

	Intersection (^)							## Takes the intersection of two tables (elements that both have in common)
		\l,r -> [x | x in l, r.has(x)]			## \l,r -> l - (l - r)

		l ^ t = [3, 4]

	Reduce (ie. Remove Duplicates)
		[2, 2].single() = Set([2, 2]) = [2]
			Other names: noDup,
		[2, 2, 3, 3] / 2 = [2, 3, 3]			## Possibility?

Splat Operator (*)									## ala Ruby
	The splat operator serves to convert between tables and expr_lists (splits tables and combines expr_lists)
		Currently the splat operator is the same as the set union operator (might make parsing difficult)
			Change splat to ! or ~
			Change union to / or &
			Keep both as is					## This is the current standard

	In the case of table splitting (where the splat is prefixed onto a table/variable)
		The splat operator translates the table into a <expr_list>
		The list is ordered by it's keys (value at index 1 will appear before the value at index 2, ...)
			How do I handle strings/etc. ???

	In the case of variable/argument assignment (where the splat is prefixed onto a variable)
		The splat operator works to translate an <expr_list> into a table
			It can be used as an alternate syntax to table literals
			This table is what is then assigned to the variable
				The translation process uses a strict left-right order (the first value is at index 1, ...)
			In this situation the splat operator does not serve to split apart the table

		Suppose a situation like "x, *y: 3, 4, 5"
			Under the rules of multiple assignment, this situation translates to "x: 3 and *y: 4, 5"
			Then y = [4, 5] and x = 3 under the process described above

		Suppose a situation like "*x, y: 3, 4, 5"
			Follow the same rules as shown above (I'll need to change sections of the function/etc. sections)
				Any other way would run into confusion when multiple splats are used (where's the boundary)
				I like the idea for x = [3, 4] and y = 5 but it is not feasible at the moment

Table Sub-types
	Arrays
		Table with only a contiguous subset of integers as keys
	Sets
		Table with only numeric keys
	Global/Scope

Have a syntax/ability to perform python-like slices
	This can be accomplished through a method
		t: [1, 2, 3, 4, 5, 6, 7]
		t.slice \i -> i ^ [3..] = [3, 4, 5, 6, 7]
		t.slice 3 = [3, 4, 5, 6, 7]						## overloads to simplify the calling proccess
		t.slice [3..] = [3, 4, 5, 6, 7]

What about multi-dimensional tables (ie. matrices) ??? [i,j] vs. [i][j]. See LCS for comparison between the two
	[i][j] will be the only syntax that is, by default, supported (at least at release)
		It's the standard syntax accross languages and it's already well defined semantically (nested tables)

	However it is possible to implement [i, j] syntax within the current structure
		Wrap within a table using splat/pattern matching
			Use pattern matching to grab the i and j (ie. _nindex: \[i, j] -> ...)		## Note this requires [[i, j]]
				This would mean that the table would be used as the key
					This brings up the problem of whether [1, 2] = [i, 2]

			It's possible to allow splat to collect the args into a table (ie. _nindex: \*t -> ...)
				Implementationally weird however

		It would then be nice to have a way of modifying where _nindex will store values	## Remember that _nindex/_index also handle access
			Have a way to map [i, j] -> x within _nindex
				Have the second return value of _nindex be the key
				Have a second metamethod that gets invoked in unison with _nindex
			_index: \[i, j] -> self[f(i, j)]

Table Equality
	## How should t1._op=(t2) work
	
	Entries (Default method)
		size(t1) = size(t2)
		Metatable(t1) = Metatable(t2)				## This is always a reference check
		for	t in zip(t1, t2) t.1 = t.2				## t1[k] = t2[k]

	Reference									## this precludes [1, 2] = [i, 2]
		ref(t1) = ref(t2)

	It should be possible to switch between the two by redefining _op=
		This then takes us back to the need to modify the key

## repl.it