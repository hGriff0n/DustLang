Execution Structures
	if-else-elseif
		if <expr> <block>					## expr = ...|'(<expr>)'|...
		'elseif <expr> <block>'*
		'else <block>'?

		It is possible to use a "if-then" style syntax with the 'do' keyword
			However 'do' is only a "helper keyword" (it does not (really) have a semantical meaning)
			The "if-do" syntax still follows the general style and format but it is slightly easier to read

		if x < 50
			print("x is smaller than 50")

		if x > 20 do										## "do" signifies a code block, it's not necessary
			print "x is bigger than 20"

	There is no native support for a switch statement in dust
		I can't settle on a good syntax for it
		There's multiple ways to get a good analog anyways

	Ternary Statement
		<expr> and <expr> or <expr>					## ala Lua
			I'm currently going to "overload" and/or to "return" <expr> in their individual cases
				Wrapping the whole structure might be a bit complicated however
		It could also be possible to write one line if-else's using the control expressions idea
			This takes advantage of the "control structures as expressions" semantics (not as concise as the above though)

Looping Structures
	for
		for <var> in <table> <block>
		Executes the given block for each entry in the table
			Each entry is stored in the var for use in the block

		Pure for-each style
			Unlike in Lua, there is no direct syntax for increment loops
			It is possible to simulate the syntax using ranges

		Generator/Iterator idiom
			Any function used to provide values to the tracking variables of a for loop
				Passed a nil when starting iteration
					Passing additional state ???
				Returns a nil when iteration is finished

			Tables default to using self._iterator as the generator
				Table._iterator iterates over all entries in the table
				But this can be customized

	while
		while <expr> <block>
		Executes the given block while the expression evaluates to true

	until
		until <expr> <block>
		Executes the given block until the expression evaluates to true
		Guaranteed to execute at least once
			Largely to differentiate it from while loops
			The ordering is to simplify the code to process control blocks
				The language also currently only allows left->right readings

Control Structures as Expressions
	Extends the rules regarding the implicit return statement to control strucutres
		Ie. the value of the last executed statement is the value of the structure
			This does not include the bound/boolean checks in loops
		You really have to wrap the structure in parentheses to get any use out of it (especially for loops)
			Otherwise with scoping, any "additional" stuff is either part of the loop or on a different line (ie. syntax error)

	Table.sum: \l, sum: 0 -> for x in l .sum:+ x		## sum is implicitly returned here
		   -versus-
	Table.sum: \l, sum: 0 ->
		for x in l .sum:+ x
		return sum

	x: if y = 3 4 else 2
		  -versus-
	x: y = 3 and 4 or 2

Shortcircuiting evaluation
	Returning a value from a control structure without evaluating all expressions
		Shortcircuits the implicit return rules of control structures/functions
			Evaluates the following expression list and then skips all following evaluation
				Causes the following list to implicitly be the "last evaluated expression"
				Also stops iteration of the loop/function/etc. if necessary

		"for x in [1..5] if x = 3 return x" is an example of shortcircuiting the for loop

	Hard exit	- return
		The main use for return is within functions (although it is allowable to use anywhere)
			There might be another use within the module/import system
		Hard exit causes the program to return to the "call point" (exits the program if in the default process)

	Soft exit	 - break
		Soft exit causes the program to go "up" one level of scoping				## see break/continue in other languages
			Similar semantically to hard exit but with a more limited focus (and a more general use case)
			May also have no meaning when used in the default process (ie. break 5)

		do
			x: (for x in [1..5] if x = 3 break x)
		print(x)										## outputs '3' (wouldn't output if return was used)

	Resumable exit - yield (if resumable functions are implemented)
		Similar semantics to Python and Lua

Boolean Expressions and Operations
	true/false
		[] and nil are implicitly convertible to false (0 might be included)
		All other values are convertible to true

	and/or	(ie. <expr> and|or <expr>)
		Both keywords are short-circuited
		These keywords follow the same evaluation principles as control structures
			ie. the value of the construct is the value of the last expression
			So then <expr1> and <expr2> = if <expr1> <expr2> else <expr1>				## or is similar

	! for the not operator
		_op!: \b -> b and false or true

	=, <, <=, >=, >, !=, <=>
		Only = and < technically require a definition
			However, at the minimum I might also define >		## floating point considerations
			Interesting to note that (x <= n) = (x < next(n))

		Comparator function (ala '<=>')
			-1 if a < b, 0 if a = b, 1 if a > b, and nil otherwise
			I might still need to system define '=' for this
		Metamethod defs (this is still compatible with comparator)

Structure reordering
	Would it be possible to reverse the ordering of pieces within a control structure (ala Ruby)
		Something on the order of "<block> if <expr>"

	My current idea is to use ','
		<block>, if <expr>

Scopes
	Module Scoping (something to consider later)
		Way to define a local "global" scope (especially for use in modules)

Variable Scope Lookup					(ie. How to determine which variable is being referenced accross scopes)
	The first method is to search for a scope where the variable is defined
		If the current scope doesn't have 'x' defined than lookup goes to the parent scope
			Note, that the current "nil = deletion" logic could cause some problems						## Are they problems or not
			Note that if the current scope is the global scope, than lookup will "fail" (nil or error)
				I could also give the ability to put a hard limit on the number of recursions before the lookup "gives up"
		If the current scope does have 'x' defined than the lookup stage is over

	However in variable assignment, this lookup is not performed				## Assignment is local by default
		To force a lookup when assigning, you can prepend the variable with a '.'
			Semantically speaking, this also forces the lookup to begin up a level
		The '.' also works on variable access in the same way (ie. force up a level)
		The effects of the '.' are local to the applied variable
			So in ".x, y: 3, 5" only 'x' is subject to the lookup rules

	Question regarding stacking lookups
		x: 3
			x: 5
				..x: 7				## These two lines attempt to define the x two scopes prior
					.(.x): 9
						..y: 7		## y is declared in the global scope (or will the second scope op do otherwise)

		I could say this is bad and refuse to support it

	There's also the possibility of going to global-first declarations
		It's simpler to implement
		I could even keep the same syntax
		However I'd lose out on a lot of flexibility

"do-block" syntax (possibility?)
	do
		x: 5
		print(x)		## 5
	print(x)			## nil

	It is possible to "halfway" implement this feature
		Reserve "do" as a keyword but have it actually do nothing
		The actual semantical value of the keyword is minimal in the current framework
			It can be trivially modified at a later point (I could "force" a code block to follow a do)
		I do like the keyword and it seems to fit well with the rest of the language

Statement seperator
	Allow multiple, independent statements to coincide on one line
	x: 5
	print x							## This can be translated to "print (x: 5)" within the current rules (I'm not sure about the assignment however)

	Option ()			## Lisp-style
		Generalize the rules so that every expression results in a value
			These values would often be unnecessary and discarded
			This would have an affect on function arguments (what???)

		(x: 5) (print x)
		-versus-
		print x: 5

Defining Expressions
	Dust is (turning into) an expression-based language but I have no real discussion of what an expression means		## probably for the best

	Assignment
	
Statement scoping
	Not currently supported in Dust
		No "good" syntax
		No appreciable need