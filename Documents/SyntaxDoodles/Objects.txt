

Type Declaration
	type <type> <table>			## Typename may have to be capitalized (currently undecided)

	type Foo [			## defines a new type with member variables
		attr: 5
	]

	Foo: [ attr: 5 ]	## Could this be a possible syntax (Variables are forced to be lowercase)
		I like the idea of it (the syntax might need work)

Type Methods
	Methods can be declared either as lambdas inside the type declaration or as functions outside (prepend with type name, much like tables)

	type Foo [
		attr: 5,
		new: \x -> attr: x
	]

	Special type functions/members (can these be modified after they've been defined ???)
		new	- defines the semantics of creating a new object (of calling the constructor)
		del - defines the semantics of deletion (what happens when the object is to be deleted)				## might remove this
		msg - defines what happens when the type is indexed with a non-defined index (not assignment)		## basically wraps '_nindex'
		rtm - flag to allow/disallow run-time modification of classes										## might remove this

		What members can't/shouldn't the programmer modify?
			'_op()' is used to create and initialize an object of the given type (but Functors)

	How to define static variables ???
		To mark a member/method as static, postpend the variable name with a `/'
			Or prepend it with a '.' (uses the scoping syntax)				## This doesn't work in function definitions

		type Foo [
			count`: 0,
			.count: 0,
			new: \ -> Foo.count:+ 1,
			del: \ -> Foo.count:- 1
		]

		def Foo.static'(foo)
			print(foo.count)

		Static variables/methods can be accessed/modified from instances of the type
			In the case of modifications, these changes are global (or thread local) to the type
			In the case of functions, the 'self' paremeter is the type table (not the object)
				Possibly add a syntax to implicitly pass the object as the first parameter
					Forget the "static" signifier (expect for the type table) ???

		x: Foo()
		x.static()			## print(x.count)
		x.static'()			## print(nil.count)
		Foo.static(x)		## print(x.count)

		How about a static keyword ???

Dust OOP
	Dust OOP primarily relies on duck typing (ie. does this object support these methods)
		There is no way of specifying how data should be laid out in memory/organization

Inheritence syntax
	<type> ++ <type_list>
		This syntax hints that dust supports multiple inheritance
			However, dust is only able to support singular inheritance
		
		The question is whether the syntax should be changed or the semantics should be adapted

	type Bar [
		width: 3,
		height: 4
	] ++ Foo

	The '++' is a special syntax for types that specifies a child relationship to the type_list


Interfaces (If I ever implement them)
	Interfaces check if a given object has a series of functions defined for its type either as members or possibly free functions
		Don't know about the feasibility (free functions/etc.)

	What's the use ???
		Duck Type checking at the function call line
			But this kinda defeats the purpose of duck typing

	Taking advantage of the "logic" syntax in dust(deprecated)'
		interface Printable x					## ie. x is a Printable iff x has a print method
			has_method? x, print
	Alternate
		interface Printable x					## this is a skin of a function call
			!(nil ^ [ x.print ])				## if any of the methods are undefined for x (ie. nil) then the interface "test" fails
	Concept system ???


Extensible objects
	Currently members/methods can be added and defined on an object after declaration (ie. objects can accrue methods as the program executes)
		I might end up adding a small flag to types that can turn this feature off


Everything's an object (ala Ruby)
	Variables, even of "primitive" types have access to various type function
		This provides a semantic meaning to "x.add(3)" and "3.add(x)" iff 'add' is defined on 'type(x)' and Int


Convertible Types
	Method of the form "def <type>.<type>()"			## ie. Int.String defines the conversion from Int to String
	See section on Converters in TypeNotes (or whatever I change it to)


For Function Overloading Dispatch
	If I don't evaluate arguments, how am I supposed to know their type

Type Reflection
