## What is an expression ?
Lambdas
	Lambdas, or anonymous functions, are one of the few data types, largely by necessity, that are entirely system defined. 

Functions
	Dust functions are first class objects, much in the same way as any Int or Table. In fact, it is possible to implement
	Functions (with argument overloading, etc.) using only lambdas and tables, however they are system defined for practicality.
	Functions are higher-order lambdas that provide a set of conveniences, such as default argument values and type checking.

	Syntax
		Definition
			The definition of a function is signified through the 'def' keyword and is divided into two parts; signature and body.

			The function signature must immediately follow the 'def' keyword. The function signature consists of a variable identifier,
			An open parenthesis, an optional arg_list, and a closing parenthesis. This is a slight degree of syntactical sugar
			In that the function's name is part of the definition and not outside of the body (This may be eased a bit later).

			The function body must immediately follow the signature declaration. The function body consists of a
			Code block on the next line (and indented at least one level) or a singular expression on the same line.
			In both cases, the value of the function is implicitly the value of the last evaluated expression.

			function_def = def <variable>(<arg_list>?) <expr>|<block>			## def <variable>?(<arg_list>?) <expr>|<block>

		Arg_list
			An arg_list is the set of possible arguments to a function. At it's simplest, it is just a list of variable identifiers.
			However, it is possible to assign default arguments (values of the variable if it passed 'nil') or to restrict the
			Argument's type (But never both). Specifying default argument involves the same syntax as assigning a variable. Restricting
			Argument type involves the same syntax as type checking (this may also invoke conversion operations).

			arg = <variable> '': <expr>'|'<- <type>''?

		Calling
			Functions naturally have the '_op()' metamethod defined, thereby enabling the '()' syntax. However, it is currently
			Permissable to forgo the parentheses when calling a function with 1 or more arguments (no arguments would be
			Indistinct from the function object itself). This defintion is likely to be system-defined as well.

	Semantics
	
	Scoping
		Closures
		

Function Declaration	
	def <name>(<arg_list>?) <expr>|<block>
		arg = <variable> '':<val>'|'<- <type>''?

	def abs(x <- Number)								## Might end up changing the syntax to use {} instead of ()
		x > 0 and x or -x

	## Have a way to create Functions using "Function(<lambda>)" style ???
	## How about abs: def(<arg_list>) <expr>|<block> ???

Fuction Calling				
	abs(4)	-or-	abs 4						## Mirrors the syntax of function declaration (ie. if decl uses (), so do calling)

	Parentheses cannot be elided if the function is not called without any arguments
		Indistinct from the function object itself, especially in the case of assignment (ie. x: abs)

Lambdas (Anonymous functions)
	Syntax
		add2: \x -> x + 2

	\-> x is a function with no arguments that returns the value of x
		If the lambda is a closure than x may be any value
		Otherwise, the lambda returns nil (scoping notwithstanding)

	Functions are just a sugar over an assignment of a lambda
		Might add several abilities that a lambda doesn't have (such as overloading or argument type checking)

Currying (Might have to delay implementation (need to consider all possible outcomes/options))
	Given:		\x -> +2		\i, j -> *		\x -> 2 +		\x, y -> max		## \x, y -> ???
	Read:		\x -> op+ 2		\i,j -> op*		\x -> 2 op+		\x,y -> max			## \x, y -> ???			## Since +/*/... are sugar for op+/op*/...
	Desired:	x + 2			i * j			2 + x			max x,y				max(double(x, y))

	Could I define it as the first line of a function is implicitly it's arguments ???
		Then currying simply becomes a question of concatenation
		Slightly confusing and possibly inefficient (but an easy way to start implementation)
		Translate: x + 2		i j *		x 2 +		x y max		x y ???

	Rearrange arguments around the functions (this could be computationally confusing)
		If there was a way to turn 2 op+ into op+ 2, then copy-pasting the arguments (with commas) would work (assuming the "no-parens" is valid)
		Translate: op+ 2, x		op* i,j			op+ 2, x		max x,y			max(double x,y)
		It should be largely trivial to add in parentheses if I need to afterwards
	
	Redefine what it means to accept a different number of arguments
		Given:	\ -> + 2		\ -> *			\ -> 2 +		\ -> max			## \x, y ->
		This changes the translations slightly (but the result is simple and well defined)
			The core idea behind the redefinition is not currently accepted however

	All things considered, the the translations should probably replace the original function in memory
		
Function Return Syntax
	Work to make this semantics indistinct from the semantics of a code block
		The "return" value is the last evaluated statement
		You can specify returns/break
		Multiple return values

	The value of the last executed statement of a function body is implicitly returned to the calling instance

	The function can be forced to treat any statement as the last statement by placing return immediately before the statement
		ie. add: \x -> return x + 2					## what about \x -> x + 2 return	(this may be easier to implement)

	Can I generalize "return" to a "break" keyword
		No cause return is a stronger keyword
			do
				for x in [1..5]
					if x = 3 break		## this stops the for loop, return stops the do-block
			

	Multiple Return
		Multiple values can be returned from a single function call by ensuring that the last executed statement is a comma seperated list of expressions
		Note: This is the same syntax as in multiple variable assignment (The behavior follows the same rules, etc.)
		
Type Checking
	At the core (ie. on untyped variables), Dust uses Duck Typing (ie. if it has the method it is allowable)
	An error is only thrown at the instance where a type mismatch occurs (through functions/system/etc.)
		Ie. the given variable is not of the given type or of a child type

	Explicit type checking
		def abs(x <- Number)			## Uses the same syntax as Static Typing
		This syntax cannot be used to specify the types of the values the function returns

Function Argument Passing
	def add(x, y) declares the function 'add' that expects two arguments
		The two arguments are referred to as 'x' and 'y' internally

	If add is called with less arguments							## Note these are purposely ignoring overloading
		Any leftover variables are assigned to nil/default values
			Basically the function is "recalled" with nil's added so that the arg_list matches exactly

		I could also go the "currying" route (like Haskell)
			Calling a function with less arguments returns a function object that would expect the remaining arguments
			This would need some integration into the existing syntax/semantics

	If add is called with more arguments
		The extra values are dropped from calculations, x is assigned to be the first arg and y the second
		Should these expressions be evaluated before they are called ???
			It would be expensive to enforce this (especially for large lists)
				But it would also be incredibly difficult to not do so (given the dynamic nature)
			But it's an intriguing possibility
				Moreover, how would I know the type of an expression before I evaluate it

		I could also go a "modified currying" route
			The return expressions are then called with the remaining values
			This would trivially enable much of the current currying operations (just redefine the functions to expect no arguments)
				However it's very confusing and possibly inoperable (what do I do with expression lists ???)

	All function arguments are unique references					## This will be changed repeatedly during language development
		The values of any variables used as arguments to a function call cannot be changed except through reassigning to the function's return
			x: [5]
			foo(x)
			print(x = [5])			## outputs 'true' (unless f redefines print (or x if x is a global))

		The key point is to not allow changes inside the function to "accidentally" propogate outside of the function (except for possibly closures)
			The same reasoning behind Haskell's functional nature
			This cannot be "directly" subverted through any api/debug/etc. functions

		It is permissable for the function to modify the arguments (for convenience)
			Any changes made to the arguments remain local to the function body
				The changes can be reflected to the original variable through return

Pattern Matching (only works if function overloading is valid)
	def add([x, y,])		## This table will only match a table of two elements or less (x/y are assigned to nil in this case)
		x + y

	def add([x, y, *z])		## This pattern matches a table of 3+ elements. In practice, it will only match a table of 4+ elements due to the previous delcaration
		x + y

	## What about pure "haskell" pattern matching (whether I will actually implement this is undecided (possibly costly))
	def add(4, 2) 42

Tables and Functions
	x: [
		y: 3,
		f: \z -> y + z,
		sety: \z -> y: z
	]

	Scoping of variables begins with the table
		This means that referencing table fields within a function does not require any "special" syntax
			However it is possible to force this lookup with 'self.' (self = x in this case)
				Though this might be deprecated so that the function can be self
			Referencing the table could also be done with the "scoping" syntax (particularly for assignment)
		It is also possible to use the table's name
			However this is not guaranteed to give the desired results

Function default values
	Default values can be given to any arguments in a dust function by simply assigning a value in the declaration
	The arg takes on the default value if a nil or no value is passed to the function in the arg's position (or the value is passed)
		Unlike in C/C++, default values do not have to follow a right->left ordering and instead may be declared/used at any point in the function

	def add(x: 2, y: 3) x + y			## def add2(y) add(nil, y)
	add(nil ,2) = 4						## it might be possible to write add(,2)
	add(3) = 6

	You can't define default values and statically type a function argument
		Both syntaxes provide an assurance that the argument will have a valid value
		There's no sense in doubling up on the protection
			The additional syntax will also be a mess to read (and possibly parse)
			However, being able to add both may make the interpreter more general
				But with the new syntax for typing, this should be trivial

Closures
	Much like overloads, this is just a specification for a how closures may be implemented
		There's no specific timeframe however

	What is a closure?
		x: 3

		def h(x) \y -> + y			## x is the argument (this is a closure)
		h: \y -> x + y					## x is the global x (indistinct from scoping)
		
	Closure by value
		Basically, the value of the variable at the time of function initialization is "spliced" into the function
			It could be possible to store the reference, but I feel that this is a better
		The above example 'g' can be easily handled with scoping rules
			Although the syntax may have to be modified

	To demonstrate closure value
		def h(x)
			ret: \y -> + x
			x :+ 3					## The value of ret does not change with this statement (\y -> + x not \y -> + x + 3)
			return ret
	
		do							## This is just to clarify that the function declaration is in a different scope than the print
			x: 3
			@f: \y -> y + x
		print(f(3))					## Outputs 6

Way to capture a variable number of arguments without resorting to the splat operator
	The impetus is to find the smallest way to define a function f, so that
		f([x, y]) = f(x, y)

	Here's a slight trick
		\t, *ct -> t + ct

		However it's not totally correct
			Suppose x: [2, 4] and y: 3
			f(x, y) = [2, 4, 3]
			f([x, y]) = [[2, 4], 3]

			A correct version would be
				\t, *ct -> ct and ([t] + ct) or t

'self' for functions
	Much like self can be used in Type methods and in tables to refer to the "parent" object
		self can be used in functions to refer to the function itself
		This is mainly useful as a shorthand for recursion, especially in anonymous lambdas
	
	However, Function self interferes with the ability to access Table and Type self
		It could be possible to use the '.' scoping syntax to alleviate this
		However, general scoping rules should take care of most intersections
			The only real problems would be if the Table/Type defines _op() or the function indexable

	def factorial(n <- Int)
		n < 2 and 1 or n * self(n - 1)
	##  n < 2 and 1 or n * factorial(n - 1)


	The problem with function self can be demonstrated here
		math: [
			let min_fact: 2,
		]

		def math.factorial(n <- Int)
			n < self.min_fact and 1 or n * self(n - 1)