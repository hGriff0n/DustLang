How capabilities should the dust program API provide to programmers (from a c++ perspective for now)

Run and load dust files / strings of dust code
	loadFile/loadString vs. run

If we're just developing an interpreter for C++, that's really all I need
	See work on autoLua
	Want to set the variable 'ksjdbf' to 3
		dust.run("ksjdbf: 3");

	Want to then get the value of 'ksjdbf'
		int ksjdbf = dust.run("ksjdbf");			// possibly (it might be advantageous to provide another syntax)

Development Idea
	Make sure to make each stage as modular as possible
		It should be trivially easy to add new behavior/syntax or change the old behavior (in the finished product especially)

	Make a lexer and optimize it
		Irons out kinks in syntax, etc.

	Make a parser and optimize it
		Again irons out kinks in syntax
		Also introduces basic error handling
		Destroy the lexer if needed

	Make the interpreter and optimize it (also generate a basic repl api (for testing))
		Irons out kinks in semantics
		Also some kinks in syntax
		Destroy/Abandon the parser if needed

	Make the public api around the interpreter
		This version of dust should be an easily extensible and moddable version
			Efficiency should not be a prime (or even secondary concern)
			The primary concern should be my ability to quickly, easily, and sanely change how the interpreter interperates the program

//using namespace dust;

//state dirt;					// state is the dust api entry

/*		What capacities should the state provide programmers ???
loadFile/loadString		-	load code strings/files into the dust program state
run						-	run files/code in the current state (could probably replace the above functions)
operator<<				-	do something of the above (C++ specific syntax though)
		
*/