

Assignment
	let? <var_list>: <expr_list>				## appending let to the beginning of the assignment makes the variable "constant"

	An assignment will evaluate to the value assigned to the variable (value of the linked expression)
		In the case of multiple assignment, the value of the last assignment

	Compound Assignment
		let? <var>:<op> <value> is equivalent to let? <var>: <var> <op> <value>
			ie. x:+ 5 = x: x + 5

		The question is whether this can be used with var_list and expr_list
			x, y:+ 5, 3		=> x, y: x + 5, y + 3
			x, y:+ 5		=> x, y: x + 5, y + 5	or x, y: x + 5, y + nil
				The first makes it a bit odd in relation to multiple assignment/function rules but I feel it is the more intuitive option

	Multiple Assignment
		This is roughly similar to perform a sequence of assignments
			The 'let' at the beginning is distributed to each "individual" assignment
				Ie. every varable declared/assigned will be constant

			The list of expressions are evaluated before the list of vars
				This allows easy swap implementation (a, b: b, a)
				What if the number of expressions > number of variables
					The same question is asked in Functions/Function Argument Passing
					This could be useful, but its expensive and wasteful
		Values are assigned to variables in a left-right order (splat notwithstanding)
			The first value in the <expr_list> is assigned to the first variable in the <var_list>
			It might be advantageous to think of these two items as being removed from their respective lists
	
	Pattern Matching in Assignment (Some discussion in Tables)
		[x, y]: [3, 5]
			x, y: 3, 5

Type Checking
	Static Typing				## Be sure to adjust Function Type Checking/Type Testing with any syntax
		let <var> <- <expr> | <type>

		The interpreter now has the capability to assign a variable while statically typing
			This is done by inferring the type of an expression
			The old syntax of let <var> <- <type> is still viable
				However it is likely to be deprecated in the future
					Although it still has it's uses inside of function declarations
				It invalidates the guarantee that a "typed" variable has a non-nil value
					The small time inbetween typing and assigning, <var> = nil

		Can I drop the let ???

		Inheritance
			If a var is statically typed, it will be able to hold values of any child type (but not a parent type, nil possible exception)

	Type Testing
		Definite Syntaxes
			type(var) = Int				## This currently does not handle inheritance
			typename(var) = "Int"		## This can't handle inheritance
			is? var, Int				## Should handle inheritance. Can "naively" be a wrapper function
			var.is Int					## Can handle inheritance. Can also be a wrapper function

		Possible Syntax
			var <- Int					## Can handle inheritance
				Extends the syntax for static/function typing
					Might be implementationally difficult
				Might not be possible
			type(var) ^ Int				## Could possibly handle inheritance (rework '^' for types)
				Seeks for Int within the iheritance heirarchy of type(var)
				Also is very extensible
					type(var) ^ [Int, String] = var <- Int or var <- String

Variable versus Type Identifiers
	Variable identifiers cannot begin with a capital letter
		All variables must begin with a lowercase letter
		This rule is relaxed slightly in the case of type constructors and converters

	Conversely all Types must begin with a capital letter

"Calling" variables
	All instances of "x(...)" go through the type's '_op()' metamethod
		When x is a function, this is a function call
		Say x is an Int/Float/Number
			Than this syntax could double as multiplication
			Int._op(): \y: 1 -> y * self
		If '_op()' is not defined on type(x)
			Error - "Undefined syntax error"

Nil and nil
	nil is the only possible value of type Nil
		nil is the default value of all dust variables

	Nil is a special type inside of dust
		It is the default type of all dust variables
			Unless the variable has been statically typed, (var.is Nil) = true
				If the variable is statically typed, then (var.is Nil) = false		## This includes function parameters (problems with default parameters)
					Note: Type checking only occurs upon assignment/initialization	## var = nil until var: ... (where ... is of type(var))
						Or should I rather automatically assign a default type value to the variable
					This is largelly a syntactical failing							## No good syntax for performing both at once
				Also note that literals cannot be of type Nil
			Coincides with the default value of all variables being nil

		It is a weak type
			If a variable has been assigned a value, then type(var) != Nil			## except if var = nil
				The variable's type has been "subsumed" by the values type
					The same procedure happens when var is assigned nil
				Note: (var.is Nil) = true					## currently
					var can also access any Nil specific functions

			Nil largely signifies the possible absence of a value

	let x <- Int
	print(x)							## outputs 'nil (print takes untyped arguments)

	x: 5
	x: nil								## error: Can't assign nil to a typed variable

	Indexing a nil value does not inherently imply an error
		For functions defined on Nil this is correct, useful, and well defined
			There's a possibility of turning Nil into something similar to the Maybe monad

		For functions not defined on Nil
			Call Nil.msg if it exists (I may not define it)
			Otherwise this would be an access error

	Deletion
		A value can not be explicitly deleted by the programmer
			Values are deleted either through RAII or through garbage collection

Type Heirarchy			## Needed for implementation
	Some degree of Java, Ruby, and Lua

String Interpolation
	Unlike Ruby, Dust does not provide a default method for interpolating strings with local variables
		Rather Dust follows the Lua/Java syntax of "adding" to strings

	But in the case of "printf" style methods, a '$' is assumed to indicate an "interpolation point"
		printf("The value of x is $x", x)