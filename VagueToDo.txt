nil is represented by an impl::Value with type_id = type::Traits<Nil>::id
	Modifying the Nil class should be heavily restricted (???)
	Nil method resolution is equivalent to Bool method resolution

The definition for table (and type) would imply being able to create subtypes
	Could I possibly modify the language to accept this
	Or should I change type to be "outside" of the expression grammar
		This would probably entail a rewrite of block

Determine how basic types will work with regards to inheritance (especially String, etc.)

Improve the Table API
	This is particularly important with regards to "appending" to the table (uses the next open int)
	Possibly start to add in evaluation hooks
	Add in more API functions
	
Changes
	Changed entire EvalState api
	get/set expect exact number of '.' in lookup

Calling Functions
	FunctionCall
		e.setResolvingFunctionName();
		fn->get(e);
		e.setResolvingFunctionName();
		e.call(##);
	Function
		e.enableObjectSyntax(self : args)