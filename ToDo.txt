Notes
	PEGTL Submodule interactions can only be done with the Git Shell
	For updating the local PEGTL repository
		In Git Shell, navigate to "Visual Studio 2015/MyResources/MyLib"
		Currently, delete the existing PEGTL directory
		Execute "git clone https://github.com/ColinH/PEGTL.git"
	Using newline in testing
		Just add "\n" in the automated tests (although the display is wonky)

Timeline
	0 Bugfixes / Improvements
		Improvements to the Testing suite
			Handling of non-printable values, specifically tables and nil
				Currently have to require_true of a comparison
				Could just use "require_type" for these (or the type checking syntax)
			Add table specific functions (?)
			"Global Review" is duplicated at the end, consider removing it
			Consider splitting test sections (see comments in Testing.h)
			Add comments to each test describing what's being tested
			Comment on what the individual tests do
		Type Tables can concievably be deleted if they are pushed on the stack at some point
			There's nothing keeping the num_references > 0
			Fix this when I actualy implement the semantics of type creation
		Consider removing the test for operator isDefd in com
			Would remove ambiguity in code execution
			"3" - 3 => String._op- not defined
				This would likely mean I can improve com lookup implementation
		Improve the implementation of GC
		Think of changing how operator resolution is handled (especially for equals)
			Currently "[3] = 3" evaluates to true
			Consider adding "metadata" (such as com_t when calling other operators ???)
		Change tables to copy-on-write semantics
			Currently tables are references (ie. pointers)
				This is passable but not what I want from the language
		Redo how get/set are handled (in relation to exception throwing)
		Check on changing ts.convertible(t1, t2) to ts.convertible(f, t)
			Basically stopping convertible(a, b) = convertible(b, a) from always being true
			Where did I want to change this from (EvalState::setVar)
		Implement Table::okayKey and Table::okayValue and provide a way to change behavior
			These methods are how "3: 3" will be prevented in the global scope and allowed in tables
				Change the expected exception on Testing:line 99 once implemented
			Also allow for restricting key and values based on given functions
		Implement Console manipulators for mac and linux
			Apparently both use ansi color codes
		Clean up the code for the testing framework
		Parser Issues
			Unsure about behavior of action<c_paren> for empty parentheses
			Speed up the performance of parsing line
				Currently has to read eval_line twice to ensure correctness
			Consider rearranging/repurposing actions to provide better parser data
			Errors need to be better
				"for i in [1..5] .sum: + i" throws an "Attempt to evaluate an empty block" at runtime
					The error is in the ": +" instead of the ":+"
			Why is "excep_if_empty" a thing ???
		Generators
			Need to generalize to allow for any number of state 
		Start reading up on the gsl
			Try converting some code once I understand it
		Various Changes
			Change 0 => false ???
			Consider change EvalState methods to return *this
		Figure out where to put "Utility" stuff
		Consider moving excep_if_empty from Block to Control
		Create an Optional class
			Need to overload EvalState::pop and ::push to get it to work
		See VagueToDo.txt

	1 Function Calling		ie. print("Hello World!") and abs(3)
		Fix bug demonstrated in test/error in main.cpp
		
		Fix stack issues with for loop
			for k, v in arr print(k, "-", v)	=> Prints out all key-values, then attempts to index stack with -1
				The exceptions from the repl loop
				Nothing is being put on the stack
					A nil should be put on there at least

		Experiment with no parens syntax a bit
	
	2 Dust Function Definition
		Update project version to 0.8.1
		Improve the implementation of Tables for storing Type member functions
			Enable dust new type creation
			Prevent type tables from being deleted during a garbage collection sweep
		Add in the correct syntax and action calls to create dust functions
		Convert tables away from pure references
			Particularly important for functions

	3 Grammar Framework Update
		Update project verstion to 0.9.1
		Potentially change the grammar to follow the basic framework in "lua53_parse.h"
		Update all documents to ensure that they reflect the current language spec
			Start working heavily on the language manual
		Update the readme to show off recent aditions
		Determine the next set of features that need to be implemented
		Look for interesting libraries to include/use
			Start building up the dust standard library
		Update testing suite
			Improve documentation and coverage of tests
			I have a better idea of what I'm doing now
		Bugfixes
		Update project version to 1.0.0

	4 Type/Table metamethods
		Convert for loop to the generator idiom

	5 Ranges and Library support

	6 Lambdas and Table Comprehensions

Notes (In case I forget some of my decisions)
	3 + e: 4	=> (3 + e): 4		/> (3 + (e: 4))		// To difficult to modify the grammar. I can't find anywhere that I expected it
	(e: 3) + 3 * e = 12									// The assignment is evaluated before the multiplication (left->right evaluation). This has some problems with current organization
	a, b:+ 2											// I'm going to go with the current semantics for now for simplicity. However, it still possible for it to be changed in the future
	Nil is defined as Bool for the sake of operator resolution (something to watch out for?)