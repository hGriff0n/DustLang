Notes
	PEGTL Submodule interactions can only be done with the Git Shell
	For updating the local PEGTL repository
		In Git Shell, navigate to "Visual Studio 2015/MyResources/MyLib"
		Currently, delete the existing PEGTL directory
		Execute "git clone https://github.com/ColinH/PEGTL.git"
	Using newline in testing
		Just add "\n" in the automated tests (although the display is wonky)

Timeline
	0 Bugfixes / Improvements
		Improvements to the Testing suite
			Handling of non-printable values, specifically tables and nil
				Currently have to require_true of a comparison
				Could add in non-printable functions
		Improve the implementation of GC
		Determine where to run the GC during evaluation
		Think of changing how operator resolution is handled (especially for equals)
			Currently "[3] = 3" evaluates to true
			Consider adding "meta-data" (such as com_t when calling other operators ???)
		Redo how get/set exceptions are handled
		Implement Table::okayKey and Table::okayValue
			These methods are how "3: 3" will be prevented in the global scope and allowed in tables
				Change the expected exception on Testing:line 99 once implemented
			Provide a way to set it for client code (maybe in the metamethods update)
			Implement "string" keys-only for scopes
		GC References are screwy again
		Parser Issues
			Unsure about behavior of action<c_paren> for empty parentheses
			Speed up the performance of parsing a line
				Currently has to read eval_line twice to ensure correctness
			Consider rearranging/re-purposing actions to provide better parser data
			Errors need to be better
				"for i in [1..5] .sum: + i" throws an "Attempt to evaluate an empty block" at runtime
					The error is the ": +" (I don't know what gets parsed though)
		Generators
			Need to generalize to allow for any number of state
		Type Fixes
			Allow for static members
			Allow for function members to be copied (current behavior assumes Function = type method)
			Determine the behavior for when new/drop are user-defined as non-functions
				Implement the fix to EvalState::completeDef to prevent exceptions
		See VagueToDo.txt

	1 Custom Types (Type.h, AST.cpp)
		Fix errors on Testing.cpp:133 - Attempt to set a field of a non-table value
		Allow methods to be added to custom types through "def" syntax
			Figure out how to handle "def Type.new"
		Should reflection be done through outside methods or with a type method
		Come up with a better way to copy over class instances
			Current way doesn't allow static members or function members
		Improve Comments in all code (explain the why)

	2 Framework Update
		Update and streamline the grammar to speed up parsing
			Look at "lua53_parse.h" for possible hints
			See if I can remove the analysis errors
			Try to add in implicit multiple returns
		Update all documents to ensure that they reflect the current language spec
			Start working heavily on the language manual
		Update the readme to show off recent additions
			See if there's anything I left "for later"
		Determine future implementation roadmap
			Look at what features still need to be implemented
			Plan out implementation plan
		Look for interesting libraries to include/use
			Start building up the dust standard library
		Update testing suite
			Improve test coverage
				Maybe add extra testing capabilities
			Improve and streamline code base
				See Bugfixes for more
		Bugfixes

	3 System Rewrite (Ground Up)
		Fix Type Implementation to accommodate built-in and custom types
			Rework "Temporary TDD methods" (Placing and access)
			Prevent client code from modifying type method tables
		Fix Dependency Loops that force bad code design
			EvalState relies on TypeSystem, can't add type methods without EvalState
			Consider moving some method definitions into the TypeSystem class
				Can then make these "friends" within the EvalState/etc. contexts
		Fix Garbage Collector implementation
			Ensure that all references are correct

	4 Standard Library
		Small Language Updates and Bugfixes
			Specify the behavior for inheriting from primitive types (ie. string)
		Add "standard library" functions and classes
		Ensure that "built-in" types have the expected class methods and fields
			ie. "Int.new() = 0" should evaluate to true
		Ensure the readme is up-to-date
			Consider starting work on the github wiki

	5 Improving Functions
		Add recursion support ("factorial" doesn't work properly)
		Make table arguments "copy-on-write"
			Really just ensure that all "gets" get forwarded to the passed table

	6 Ranges and stl update
		Get generators to work in the context of for loops
		Create ranges as syntactical sugar for basic arithmetic generators
			Try to create more complex generators if possible
		Create iterator methods for tables and move table for-each to use them
		
	7 Type/Table metamethods
		Convert for loop to the generator idiom

	8 Lambdas and Table Comprehensions

	9 Developer API work
		Cleanup the working of the entire project
		Update to 2.0.0

Notes (In case I forget some of my decisions)
	3 + e: 4	=> (3 + e): 4		/> (3 + (e: 4))		// To difficult to modify the grammar. I can't find anywhere that I expected it
	(e: 3) + 3 * e = 12									// The assignment is evaluated before the multiplication (left->right evaluation). This has some problems with current organization
	a, b:+ 2											// I'm going to go with the current semantics for now for simplicity. However, it still possible for it to be changed in the future
	Nil is defined as Bool for the sake of operator resolution (something to watch out for?)