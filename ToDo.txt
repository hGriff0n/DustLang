Notes
	PEGTL Submodule interactions can only be done with the Git Shell
	For updating the local PEGTL repository
		In Git Shell, navigate to "Visual Studio 2015/MyResources/MyLib"
		Currently, delete the existing PEGTL directory
		Execute "git clone https://github.com/ColinH/PEGTL.git"
	Using newline in repl/testing
		Just add "\n" in the automated tests (although the display is wonky)
		For the repl loop, use getmultiline
			getmultiline waits until [ENTER] is hit twice before accepting

Opinions on adapting code to use the C++ Common Code Standards and the GSL
	I feel like this would be a good idea on the whole
		I currently can't explain why though

	However there are many downsides the mean I won't implement it yet
		Time-costly to go through and implement for the whole project
			This will only get worse as time goes on however
		I'm not used to the new standards
			Error prone if I perform the switch while I'm figuring this stuff out
			If I don't understand my current code at times, how can I accurately adapt it to the new standard?
		Some of	the juicy stuff is not available yet (static analyzers)

Timeline
	0 Bugfixes / Improvements
		Comments cause parser errors
		Possibly improve the Testing System code
			Is there a way to get the testing system to print the type of the exception if thrown a "wrong" exception
		Improve the usefulness of the Testing suite by adding a review of the status of all (global) tests that were run
			Possibly add in sub-test reviews if able
			Could also replace the last statement of the run_tests
		Ensure that the default operators handle references properly
			Consider changing EvalState::pop to perform the proper reference handling
		Add in TryCatch ASTNode
			Handles try-catching of dust exceptions

	1 Scoping and multi-lined grammar
		How to define Scoping
			Determine the difference between a tab and x spaces															# Scoping whitespace rules
				How does Python resolve this problem
					Requiring a ':' to begin a new scope (ie. do keyword)?
						But what about lambdas
					Line joining
						Python uses the '\' character to join physical lines into logical lines
					Space and tab are different characters
						Scoping is only introduced with tabs
					Copy-paste
						Translate all tabs to spaces (or vice versa) before parsing

		Block evaluation
			Evaluating a Block always requires the loading of a new scope, regardless of execution location
				The "main file" Block loads the global scope into curr_scp
				All other Blocks must create their scope

			Ending a Block evaluation requires one of two actions
				Delete the scope if the save_scope field is not set
				Push the scope on the stack if save_scope is set

		Be able to create and parse scopes using tabbing
			block is currently a "non-recoverable" node (you can't recover from failures during parsing)

			Possible program change
				Change the NEW_SCOPE debug node used to stop Block combination to a Control node
					The default NEW_SCOPE node will become a "run once" Control node
					Loops and (possibly) branches will act as the control node
				This Control node handles how the block is run
					"run once" is analagous to Block::eval
					"for" rather translates into something like while (For::eval) Block::eval
					This might have some problems with evaluating while versus do-while
				This removes using program resources on completely useless operations
					Except maybe not (Block construction might stop on an inner loop)

		Solve the problem with analysis
			Analysis says there's an infinite loop with block (probably because I don't know what I'm doing with that stuff)
			problem: cycle without progress detected at class struct dust::parse::block

	2 True Nil type and values
		Change pushNil from push(0) to push(impl::Value{})
			An impl::Value with type_id == ts.NIL is the representation of nil
		Update code to account for this possibility
		Update api to enable programmers to query this possibility
			Possibly create a "Nil" struct for use as a template arg/etc.

	3 Type Definitions and Table Syntax
		Have the ability to create new types and assign inheritance relationships
		Have some interaction with type ids, if only for debugging purposes
		Add a basic recognition of Table syntax (so that the grammar accepts tables)
			Currently, tables are Blocks with the table flag set
				An expression needs a default key if it is not an Assign node
					Printing is still a problem
					Would ',' then become an expression seperator (outside of the list functionality) ???
					There's also the implications on the range syntax (would this need tables)
				However, I'm not sure how this'll work with scoping
					Possibly define a special "table_block" parse rule
		Add a Table type and define operations/com resolution in relation to the it
	4 Table Semantics
		Allow impl::Table to store "Variables" of any type
		Have the table parse action set the "table" and "save_scope" flags in Block on completion
			First see if tables
		Generalize RuntimeStorage and GC so that Tables can be stored
			Modify Value so that tables can be stored
		Determine how to interact with tables from an API standpoint
		Indexable arrays
		Determine how to access the arrays
		Assigning values to the arrays
		_nindex and _index metamethods
		Arrays -> Tables (any key)
		Empty Table => false
	5 Keyword Recognition
		Update pegtl library
		Get the grammar to recognize various keywords
		Work on the framework for adding keywords to the AST
			BinaryKeyword is a temporary addition to test and/or
		Possibly clean up EvalState and Grammar
	6 Exception and Error update
		Update exceptions and errors to better fit the new features
		Add exception catching and error functions
		Add throw/catch (or whatever I call it in dust) functionality
			I won't have the syntax yet though
		Improve Exception Error Messages
			Mainly work on Exception constructors
	7 Strict Parser Update
		Update the parser so that wrong programs will ouput an error (as opposed to interpreting a subset)
	8 Function Calling		ie. print("Hello, World!")
		Basic syntax and semantics (Argument passing, etc.)			## Get functions callable
		Can assign functions and then call the assigned function	## a = print and a(3)
			Would this necessitate having _op() syntax work be done???
		_op() syntax (Metamethods ???)
		Optional: No parens syntax
	9 Keyword Framework Update
		Potentially change the grammar to follow the basic framework in "lua53_parse.h"
	10 Scoping Improvement Work
	11 Control Structures
	12 Table definition (This can go before scoping)
	13 Function definition (no lambdas)
	14 Metamethods (converting syntax into function calls)
	...

Other
	Exceptions and error handling
		Stack out of data
		No defined conversion
		...
	Make the parser reject ill-formed input
	String escape characters

Notes (In case I forget some of my decisions)
	3 + e: 4	=> (3 + e)[: 4]		/> (3 + (e: 4))		// To difficult to modify the grammar. I can't find anywhere that I expected it
	(e: 3) + 3 * e = 12									// The assignment is evaluated before the multiplication (left->right evaluation). This has some problems with current organization
	a, b:+ 2											// I'm going to go with the current semantics for now for simplicity. However, it still possible for it to be changed in the future
	a, b: b, c: 9										// Again, I'm going to use the current semantics for simplicity. There also would be difficulty in correctly parsing it otherwise due to the overlap and the fact that an assignment is an expression