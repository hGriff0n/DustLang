Notes
	PEGTL Submodule interactions can only be done with the Git Shell
	For updating the local PEGTL repository
		In Git Shell, navigate to "Visual Studio 2015/MyResources/MyLib"
		Currently, delete the existing PEGTL directory
		Execute "git clone https://github.com/ColinH/PEGTL.git"
	Using newline in testing
		Just add "\n" in the automated tests (although the display is wonky)

Timeline
	0 Bugfixes / Improvements
		Improvements to the Testing suite
			Handling of non-printable values, specifically tables and nil
				Currently have to require_true of a comparison
				Could just use "require_type" for these (or the type checking syntax)
			Add table specific functions (?)
			"Global Review" is duplicated at the end, consider removing it
			Consider splitting test sections (see comments in Testing.h)
			Clean up the code spaghetti
		Type Tables can concievably be deleted if they are pushed on the stack at some point
			There's nothing keeping the num_references > 0
			Fix this when I actualy implement the semantics of type creation
		Consider removing the test for operator isDefd in com
			Would remove ambiguity in code execution
			"3" - 3 => String._op- not defined
				This would likely mean I can improve com lookup implementation
		Improve the implementation of GC
			Also determine where to run the GC
		Think of changing how operator resolution is handled (especially for equals)
			Currently "[3] = 3" evaluates to true
			Consider adding "metadata" (such as com_t when calling other operators ???)
		Change tables to copy-on-write semantics
			Currently tables are references (ie. pointers)
				This is passable but not what I want from the language
		Redo how get/set are handled (in relation to exception throwing)
		Check on changing ts.convertible(t1, t2) to ts.convertible(f, t)
			Basically stopping convertible(a, b) = convertible(b, a) from always being true
			Where did I want to change this from (EvalState::setVar)
		Implement Table::okayKey and Table::okayValue
			These methods are how "3: 3" will be prevented in the global scope and allowed in tables
				Change the expected exception on Testing:line 99 once implemented
			Provide a way to set it for client code (maybe in the metamethods update)
			Implement "string" keys-only for scopes
		Implement Console manipulators for mac and linux
			Apparently both use ansi color codes
		GC References are screwy again
		Parser Issues
			Unsure about behavior of action<c_paren> for empty parentheses
			Speed up the performance of parsing line
				Currently has to read eval_line twice to ensure correctness
			Consider rearranging/repurposing actions to provide better parser data
			Errors need to be better
				"for i in [1..5] .sum: + i" throws an "Attempt to evaluate an empty block" at runtime
					The error is the ": +" (I don't know what gets parsed though)
			Why is "excep_if_empty" a thing ???
		Generators
			Need to generalize to allow for any number of state
		Various Changes
			Change 0 => false ???
			Consider change EvalState methods to return *this
		Figure out where to put "Utility" stuff
		Consider moving excep_if_empty from Block to Control
		See VagueToDo.txt

	1 Dust Function Definition
		Add in the grammar and actions for defining dust functions
			Need to add in argument handling, multiple returns
		Define the correct API for running dust functions
		Improve the implementation of Tables for storing Type member functions
			Add an impl::Value member (possibly remove the Table member)
			Prevent type tables from being deleted during a garbage collection sweep (and enable new type)
		Improve the implementation of Collector<Tables>
			Convert tables away from pure references
				Particularly important for argument passing
		Enable usage on other computers
			Get makefile/installer working
			Release (v 1.0.0)

	2 Grammar Framework Update
		Potentially change the grammar to follow the basic framework in "lua53_parse.h"
		Update all documents to ensure that they reflect the current language spec
			Start working heavily on the language manual
		Update the readme to show off recent aditions
			See if there's anything I left "for later"
		Determine future implementation roadmap
			Look at what features still need to be implemented
			Plan out implemnetation plan
		Look for interesting libraries to include/use
			Start building up the dust standard library
		Update testing suite
			Improve test coverage
				Maybe add extra testing capabilities
			Improve and streamline code base
				See Bugfixes for more
		Bugfixes

	3 Type/Table metamethods
		Convert for loop to the generator idiom

	4 Ranges and Library support

	5 Lambdas and Table Comprehensions

	6 Developer API

Notes (In case I forget some of my decisions)
	3 + e: 4	=> (3 + e): 4		/> (3 + (e: 4))		// To difficult to modify the grammar. I can't find anywhere that I expected it
	(e: 3) + 3 * e = 12									// The assignment is evaluated before the multiplication (left->right evaluation). This has some problems with current organization
	a, b:+ 2											// I'm going to go with the current semantics for now for simplicity. However, it still possible for it to be changed in the future
	Nil is defined as Bool for the sake of operator resolution (something to watch out for?)