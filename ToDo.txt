Notes
	PEGTL Submodule interactions can only be done with the Git Shell
	For updating the local PEGTL repository
		In Git Shell, navigate to "Visual Studio 2015/MyResources/MyLib"
		Currently, delete the existing PEGTL directory
		Execute "git clone https://github.com/ColinH/PEGTL.git"
	Using newline in repl/testing
		Just add "\n" in the automated tests (although the display is wonky)
		For the repl loop, use getmultiline
			getmultiline waits until [ENTER] is hit twice before accepting

Opinions on adapting code to use the C++ Common Code Standards and the GSL
	I feel like this would be a good idea on the whole
		I currently can't explain why though

	However there are many downsides the mean I won't implement it yet
		Time-costly to go through and implement for the whole project
			This will only get worse as time goes on however
		I'm not used to the new standards
			Error prone if I perform the switch while I'm figuring this stuff out
			If I don't understand my current code at times, how can I accurately adapt it to the new standard?
		Some of	the juicy stuff is not available yet (static analyzers)

Timeline
	0 Bugfixes / Improvements
		Nil method resolution still needs work (esp. in callMethod)
			The current process might catch some functions that shouldn't work on Nil types
		Need to adapt Testing to handle non-printable values
			Could just use "require_type" for these (or the type checking syntax)
		Improve the usefulness of the Testing suite by adding a review of the status of all (global) tests that were run
			Possibly add in sub-test reviews if able
			Could also replace the last statement of the run_tests
		Clean up code
			Block::eval
			Try to reduce the number of ASTNodes
		See VagueToDo.txt

	1 Table Semantics (need to rework the breakdown chart)
		Scope as a value
			Create a RuntimeStorage solution for impl::Table
			Push/pop scopes on the stack
		First-class Scopes
			Be able to assign scopes to variables
			Have the syntax and semantics for scope access (using [] and .)
				Be able to assign variables in "tables"
			Implement basic operator overloads
		Generalize Scope into Table
			Add in the ability to use int keys to impl::Table
				Also have the ability to restrict key types
			Add in the Bool conversions ([] = false, otherwise true)
			Implement _nindex and _index metamethods
		Complete Table type
			Have the ability to index a Table using values of any type
			Convert Types to have an impl::Table storage member (can't completely convert yet)
			Add in some API functions
			Complete operator overloads
		Generalize RuntimeStorage and GC
			Merge the Table RuntimeStorage and the String RuntimeStorage into one class (possibly templated)
			Modify the GC to be able to handle both classes

	2 Keyword Recognition
		Update pegtl library
			Possibly include the GSL as a submodule
		Get the grammar to recognize all keywords (in correct precedence)
		Prevent keywords from being interpreted as variable names when not part of an expression that uses it
			This occurs for all keywords except for true, false, and nil (literals are matched first)
		Work on the framework for adding keywords to the AST
			BinaryKeyword is a temporary node to test and/or
		Possibly clean up EvalState and Grammar

	3 Exception and Error update
		Update exceptions and errors to better fit the new features
		Add exception catching and error functions
		Improve Exception Error Messages
			Mainly work on Exception constructors

	4 Strict Parser Update
		Update the parser so that wrong programs will ouput an error (as opposed to interpreting a subset)
			I may have already done this (although I could make the errors more informative)
		Possibly start implementing custom Control specializations
		Standardize code standards
			Particularly method name case
			Change TypeSystem::getId to TypeSystem::getID (or get_id)
		Improve expr_4 grammar to be more accurate
			ee_tc can't realistically be performed more than once in a row (outside of testing for Bool)
				I could also have the result of evaluation be the left hand side

	5 Function Calling		ie. print("Hello, World!")
		Be able to store functions as values
		Convert Types completely to impl::Table for storage concerns
			Make Types indexable much like tables
		Basic syntax and semantics (Argument passing, etc.)			## Get functions callable
		Can assign functions and then call the assigned function	## a = print and a(3)
			Would this necessitate having _op() syntax work be done???
		_op() syntax (Metamethods ???)
		Optional: No parens syntax

	6 Grammar Framework Update
		Potentially change the grammar to follow the basic framework in "lua53_parse.h"
		Update all documents to ensure that they reflect the current language spec
		Update the readme to show of recent aditions
		Determine the next set of features that need to be implemented



Notes (In case I forget some of my decisions)
	3 + e: 4	=> (3 + e)[: 4]		/> (3 + (e: 4))		// To difficult to modify the grammar. I can't find anywhere that I expected it
	(e: 3) + 3 * e = 12									// The assignment is evaluated before the multiplication (left->right evaluation). This has some problems with current organization
	a, b:+ 2											// I'm going to go with the current semantics for now for simplicity. However, it still possible for it to be changed in the future
	a, b: b, c: 9										// Again, I'm going to use the current semantics for simplicity. There also would be difficulty in correctly parsing it otherwise due to the overlap and the fact that an assignment is an expression