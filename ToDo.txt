Notes
	PEGTL Submodule interactions can only be done with the Git Shell
	For updating the local PEGTL repository
		In Git Shell, navigate to "Visual Studio 2015/MyResources/MyLib"
		Currently, delete the existing PEGTL directory
		Execute "git clone https://github.com/ColinH/PEGTL.git"
	Using newline in testing
		Just add "\n" in the automated tests (although the display is wonky)

Timeline
	0 Bugfixes / Improvements
		Improvements to the Testing suite
			Figure out ways of testing non-printable/non-C++ values
			Add in unit tests of implementation structures
		Redo how get/set exceptions are handled										## What do I even mean by this ???
		Parser Issues
			Unsure about behavior of action<c_paren> for empty parentheses
		Type System
			Determine the behavior for when new/drop are user-defined as non-functions
				Implement the fix to EvalState::completeDef to prevent exceptions
			Fix Stack bloat for when "usernew" returns multiple values
				Force the last line of new to be self (How?)
				Set a member of e to the number of returned values (Possbile)
			Implement drop and drop supplement
		See VagueToDo.txt

	1 Framework/Documentation Update
		Look for interesting libraries to include/use for implementation
			Move to using the single file from the submodule instead of my copied version
		Start planning out the standard library
		Bugfixes
			Have return exit a function
				i'm currently treating return as a way of allowing multiple returns in the grammar (not as an actual break)
			Stop stack errors in factorial recursion
			Minimize test errors
		Get Travis integration working
			This means I need to make a CMake/make file

	2 Ground Up Rewrite
		Plan out the entire system on paper
			Focus on developing a consistent and minimal development api
		Improve the grammar and parsing												## Look to "lua53_parse.h" for hints ???
			Rewrite the grammar from the ground up (focus on speed and simplicity)
				Look into using multiple tailored parsers in a chaining fashion
					eg. Variable lookup - "foo.type" should be valid syntax, current grammar sees "type" as a keyword
						Possibility is the "foo." causes a variable parser to be invoked on the rest of the input
					eg. "foo <- 3" and "foo <- Int" could both be parsed with a TypeCheck parser after the "<-"
						This could also be done with a simple "sor" parsing rule though
			Remove any analysis errors
			Look into allowing implicit multiple returns
				Right now, the grammar basically forces the explicit "return"
			Rearrange/re-purpose grammar rules/actions to provide better data
				Start beginning to use that data for better error messages
		Fix Type Implementation to accommodate built-in and custom types
			Rework "Temporary TDD methods" (Placing and access)
			Prevent client code from modifying type method tables
		Fix Dependency Loops that force bad code design
			EvalState relies on TypeSystem, can't add type methods without EvalState
			Consider moving some method definitions into the TypeSystem class
				Can then make these "friends" within the EvalState/etc. contexts
		Fix Garbage Collector implementation
			Ensure that all references are correct
			Determine where to run the GC during evaluation
			Improve the implementation in general
		Implement a basic C-side module loading system
			Work on the syntax/semantics for the dust side

	3 Improving Functions
		write tests for this section
		add lambdas to the grammar
		make table arguments "copy-on-write" (or something similar)
		add in argument syntax (with default values, etc.)

	4 Standard Library
		write tests for this section
		get modules and "require" working
		get metamethod resolution and calling to work for all metamethods
			first specify the list of all metamethods and their contexts
			implement _okayKey and _okayValue for scopes
		start writing the standard library
			ensure that "built-in" types have all class methods and fields (ie. Int.new())
				this includes all metamethods (though they won't actually work yet)
			build up 'io', ... libraries
		ensure the readme is up-to-date
		small updates and bugfixes

	5 For Loop updates
		write tests for this section
		implement the generator idiom
			need to be general for any amount of state (apparently I've done some work on this ???)
			change for loops to run on generators
			add "_iterator" method to tables (really a metamethod)
		get ranges to work as syntactical sugar for basic arithmetic generators
			try to create more complex ones if possible
		get ranges to work in the context of tables (ie. [1..5])
			try to make this lazy if possible

	6 Table improvements
		write tests for this section
		implement the splat operator for creating and deconstructing a table into its elements
			change how the Assign node works to account for this change
		implement set comprehensions for creating tables
			try to generalize this to create tables

	7 Variable Completion
		write tests for this section
		add in 'let' bindings to the variable handling
			add in requisite exceptions and handling
		add in syntax for performing static typing to variables
		update function arguments to handle these capabilities

	8 Language updates
		write tests for this section
		add in a conception of interfaces/traits to dust		## just to allow simple method definitions
			## syntax: trait <Trait> for <Type> ???
		continue work on the stl and update to reflect additions
			TODO: add in new libraries
		start work on dust's c++ interface and api
			improve parsing errors

	9 Closures and Reflection 
		investigate adding closures to dust (what would be most acceptable)
			implement closures for lambdas
		investigate adding reflection to the language
			implement 'typeof' method
			create functions to run dust code from dust
		write tests once i've decided what to implement

	10 Language Finalization
		continue work on stl libraries and ensure they are up to date
			start benchmarking implementations
			refine tests to ensure correctness
		finalize initial developer api
		release 2.0.0

	11 Documentation
		create langage manual
		create stl manual

Notes (In case I forget some of my decisions)
	3 + e: 4	=> (3 + e): 4		/> (3 + (e: 4))		// Too difficult to modify the grammar. I can't find anywhere that I expected it
	(e: 3) + 3 * e = 12									// The assignment is evaluated before the multiplication (left->right evaluation). This has some problems with current organization
	a, b:+ 2											// I'm going to go with the current semantics for now for simplicity. However, it still possible for it to be changed in the future
	Nil is defined as Bool for the sake of operator resolution (something to watch out for?)