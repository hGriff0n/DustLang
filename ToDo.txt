Notes
	PEGTL Submodule interactions can only be done with the Git Shell
	For updating the local PEGTL repository
		In Git Shell, navigate to "Visual Studio 2015/MyResources/MyLib"
		Currently, delete the existing PEGTL directory
		Execute "git clone https://github.com/ColinH/PEGTL.git"
	Using newline in repl/testing
		Just add "\n" in the automated tests (although the display is wonky)
		For the repl loop, use getmultiline
			getmultiline waits until [ENTER] is hit twice before accepting

Opinions on adapting code to use the C++ Common Code Standards and the GSL
	I feel like this would be a good idea on the whole
		I currently can't explain why though

	However there are many downsides the mean I won't implement it yet
		Time-costly to go through and implement for the whole project
			This will only get worse as time goes on however
		I'm not used to the new standards
			Error prone if I perform the switch while I'm figuring this stuff out
			If I don't understand my current code at times, how can I accurately adapt it to the new standard?
		Some of	the juicy stuff is not available yet (static analyzers)

Timeline
	0 Bugfixes / Improvements
		Convert Block to use a Control node to stop assembly (instead of a NEW_NODE/empty) ## see VagueToDo.txt
			Also convert to use Control::iterate in evaluation
		Consider removing get- and setGlobal
		Improve the usefulness of the Testing suite by adding a review of the status of all (global) tests that were run
			Possibly add in sub-test reviews if able
			Could also replace the last statement of the run_tests
		Need to adapt Testing to handle non-printable values
			Could just use "require_type" for these
		Clean up code, especially Block::eval
		Consider removing the Storage temp interface
		Keywords can be recognized as variable names when not a part of any expression that uses it
			Outside of true, false, and nil
		Standardize code standards
			Particularly method name case
		See VagueToDo.txt

	1 Type Definitions and Table Syntax
		Add in <- syntax (higher priority than and/or)
		Define operations/com resolution on the Table type
		Determine how basic types will work with regards to inheritance (especially String, etc.)

	2 Table Semantics
		Convert Types to use impl::Table for storage
		Allow impl::Table to store "Variables" of any type
		Have the table parse action set the "table" and "save_scope" flags in Block on completion
			First see if tables ???
		Generalize RuntimeStorage and GC so that Tables can be stored
			Modify Value so that tables can be stored
		Determine how to interact with tables from an API standpoint
		Indexable arrays
		Determine how to access the arrays
		Assigning values to the arrays
		_nindex and _index metamethods
		Arrays -> Tables (any key)
		Empty Table => false

	3 Keyword Recognition
		Update pegtl library
		Get the grammar to recognize various keywords
		Work on the framework for adding keywords to the AST
			BinaryKeyword is a temporary addition to test and/or
		Possibly clean up EvalState and Grammar
	4 Exception and Error update
		Update exceptions and errors to better fit the new features
		Add exception catching and error functions
		Add throw/catch (or whatever I call it in dust) functionality
			I won't have the syntax yet though
		Improve Exception Error Messages
			Mainly work on Exception constructors
	5 Strict Parser Update
		Update the parser so that wrong programs will ouput an error (as opposed to interpreting a subset)
	6 Function Calling		ie. print("Hello, World!")
		Basic syntax and semantics (Argument passing, etc.)			## Get functions callable
		Can assign functions and then call the assigned function	## a = print and a(3)
			Would this necessitate having _op() syntax work be done???
		_op() syntax (Metamethods ???)
		Optional: No parens syntax
	7 Keyword Framework Update
		Potentially change the grammar to follow the basic framework in "lua53_parse.h"
	8 Scoping Improvement Work
	9 Control Structures
	10 Table definition (This can go before scoping)
	11 Function definition (no lambdas)
	12 Metamethods (converting syntax into function calls)
	...


Notes (In case I forget some of my decisions)
	3 + e: 4	=> (3 + e)[: 4]		/> (3 + (e: 4))		// To difficult to modify the grammar. I can't find anywhere that I expected it
	(e: 3) + 3 * e = 12									// The assignment is evaluated before the multiplication (left->right evaluation). This has some problems with current organization
	a, b:+ 2											// I'm going to go with the current semantics for now for simplicity. However, it still possible for it to be changed in the future
	a, b: b, c: 9										// Again, I'm going to use the current semantics for simplicity. There also would be difficulty in correctly parsing it otherwise due to the overlap and the fact that an assignment is an expression