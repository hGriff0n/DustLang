
Timeline
	1 Exceptions and Errors
		Cleanup code
	2 Testing
		Update and flesh out Tests.txt to be more comprehensive
		Create an automised testing suite that can be used to quickly test the current state of the interpreter
	3 Scoping and multi-lined grammar
		Modify the grammar to accept multiple lines
			This isn't really possible with the current loop structure (expects newline ([ENTER]) to end input)
			Could I use \n to make "new lines" YES
		Have the input "evaluate" to the value of the last line
		Have tabbing create a new scope
		Implement scoped declarations and access
		Implement global and local variable distinction				## be able to access "masked" variables
	4 Type Definitions
		Have the ability to create new types and assign inheritance relationships
		Have some interaction with type ids, if only for debugging purposes
		Add a basic recognition of Table syntax (no semantical influence yet)
	5 Table Semantics
		Indexable arrays
		Determine how to access the arrays
		Assigning values to the arrays
		_nindex and _index metamethods
		Arrays -> Tables (any key)
	6 Exception and Error update
		Update exceptions and errors to better fit the new features
		Add exception catching and error functions
		Add throw/catch (or whatever I call it in dust) functionality
			I won't have the syntax yet though
		Improve Exception Error Messages
			Mainly work on Exception constructors
	7 Function Calling		ie. print("Hello, World!")
		Basic syntax and semantics (Argument passing, etc.)			## Get functions callable
		Can assign functions and then call the assigned function	## a = print and a(3)
			Would this necessitate having _op() syntax work be done???
		_op() syntax (Metamethods ???)
		Optional: No parens syntax
	8 Keywords (More of a framework update)
	9 Scoping Improvement Work
	10 Control Structures
	11 Table definition (This can go before scoping)
	12 Function definition (no lambdas)
	13 Metamethods (converting syntax into function calls)
	...

Other
	Exceptions and error handling
		Stack out of data
		No defined conversion
		...
	Make the parser reject ill-formed input
	String escape characters

Notes (In case I forget some of my decisions)
	3 + e: 4	=> (3 + e)[: 4]		/> (3 + (e: 4))		// To difficult to modify the grammar. I can't find anywhere that I expected it
	(e: 3) + 3 * e = 12									// The assignment is evaluated before the multiplication (left->right evaluation). This has some problems with current organization
	a, b:+ 2											// I'm going to go with the current semantics for now for simplicity. However, it still possible for it to be changed in the future
	a, b: b, c: 9										// Again, I'm going to use the current semantics for simplicity. There also would be difficulty in correctly parsing it otherwise due to the overlap and the fact that an assignment is an expression