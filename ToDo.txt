Notes
	PEGTL Submodule interactions can only be done with the Git Shell
	For updating the local PEGTL repository
		In Git Shell, navigate to "Visual Studio 2015/MyResources/MyLib"
		Currently, delete the existing PEGTL directory
		Execute "git clone https://github.com/ColinH/PEGTL.git"
	Using newline in testing
		Just add "\n" in the automated tests (although the display is wonky)

Timeline
	0 Bugfixes / Improvements
		Improvements to the Testing suite
			Handling of non-printable values, specifically tables and nil
				Currently have to require_true of a comparison
				Could add in non-printable functions
		Redo how get/set exceptions are handled										## What do I even mean by this ???
		Parser Issues
			Unsure about behavior of action<c_paren> for empty parentheses
			Errors need to be better
				"for i in [1..5] .sum: + i" throws an "Attempt to evaluate an empty block" at runtime
					The error is the ": +" (I don't know what gets parsed though)
		Type System
			Consider changing operator resolution handling (especially for "=")
				Currently "[3] = 3" evaluates to true
				Consider adding "meta-data" (such as com_t when calling other operators ???)
			Determine the behavior for when new/drop are user-defined as non-functions
				Implement the fix to EvalState::completeDef to prevent exceptions
			Figure out why the commented code on Testing:146 doesn't work
			Fix Stack bloat for when "usernew" returns multiple values
				Force the last line of new to be self (How?)
				Set a member of e to the number of returned values (Possbile)
			Implement drop and drop supplement
		See VagueToDo.txt

	1 Framework/Documentation Update
		Rewrite testing suite
			Convert all tests over to CATCH
				Rewrite to only use proven behavior in each test
				Improve testing coverage of the language
				Add in testing coverage of the language backing structures (Not necessary though)
					Need to have a way to gate these tests though
			Convert the Testing.h to providing helper methods for implementing the tests
				Parse function given a string and EvalState&
				Parse function given a string to produce AST
			Possibly add in a command arg to control running tests
			Possibly add Catch as a submodule to the git repo
				Possibly move to using the submodule single file header instead of including it in the project (to keep catch up to date)
		Start developing end user API
			Wrap EvalState/AST/ScopeTracker into one class
				Realize I don't have to make all EvalState methods available (I can put more intrusive methods there)
		Determine future implementation roadmap
			Look at what features still need to be implemented
			Plan out implementation plan
			Write tests for the features
		Look for interesting libraries to include/use for implementation
		Start planning out the standard library
		Bugfixes

	2 System Rewrite (Ground Up)
		Plan out the entire system on paper
		Improve the grammar and parsing												## Look to "lua53_parse.h" for hints ???
			Rewrite the grammar from the ground up (focus on speed and simplicity)
				Look into using multiple tailored parsers in a chaining fashion
					eg. Variable lookup - "foo.type" should be valid syntax, current grammar sees "type" as a keyword
						Possibility is the "foo." causes a variable parser to be invoked on the rest of the input
					eg. "foo <- 3" and "foo <- Int" could both be parsed with a TypeCheck parser after the "<-"
						This could also be done with a simple "sor" parsing rule though
			Remove any analysis errors
			Look into allowing implicit multiple returns
				Right now, the grammar basically forces the explicit "return"
			Rearrange/re-purpose grammar rules/actions to provide better data
				Start beginning to use that data for better error messages
		Fix Type Implementation to accommodate built-in and custom types
			Rework "Temporary TDD methods" (Placing and access)
			Prevent client code from modifying type method tables
		Fix Dependency Loops that force bad code design
			EvalState relies on TypeSystem, can't add type methods without EvalState
			Consider moving some method definitions into the TypeSystem class
				Can then make these "friends" within the EvalState/etc. contexts
		Fix Garbage Collector implementation
			Ensure that all references are correct
			Determine where to run the GC during evaluation
			Improve the implementation in general
		Implement a basic C-side module loading system
			Work on the syntax/semantics for the dust side

	3 Standard Library
		Small Language Updates and Bugfixes
			Specify the behavior for inheriting from primitive types (ie. string)
		Add "standard library" functions and classes
		Ensure that "built-in" types have the expected class methods and fields
			ie. "Int.new() = 0" should evaluate to true
		Ensure the readme is up-to-date
			Consider starting work on the github wiki
		Release "2.0.0"

	4 Improving Functions
		Get factorial to work properly
		Make table arguments "copy-on-write"
			Really just ensure that all "gets" get forwarded to the passed table

	5 Ranges and stl update
		Implement a conception of generators
			Need to be general for any amount of state
				## Note: Apparently, I've already done some work on this
			Get for loops to accept generators
		Create ranges as syntactical sugar for basic arithmetic generators
			Try to create more complex generators if possible
		Create iterator methods for tables and move table for-each to use them
		
	6 Type/Table metamethods
		Implement okayKey and okayValue for scopes (string-only keys)
			These methods are how "3: 3" will be prevented in the global scope and allowed in tables
		Allow for okayKey and okayValue to be set in client code
		Convert for loop completely to the generator idiom
			Implement "iterator" metamethod for tables

	7 Lambdas and Table Comprehensions

	8 Developer API work
		Streamline and Lockdown the public interface
		Improve parsing error messages
		Improve the dsl
		Update to "3.0.0"

	9 Reflection
		Determine Reflection framework
		Implement typeof to provide type level reflection
		Create functions to run/load code from dust

Notes (In case I forget some of my decisions)
	3 + e: 4	=> (3 + e): 4		/> (3 + (e: 4))		// Too difficult to modify the grammar. I can't find anywhere that I expected it
	(e: 3) + 3 * e = 12									// The assignment is evaluated before the multiplication (left->right evaluation). This has some problems with current organization
	a, b:+ 2											// I'm going to go with the current semantics for now for simplicity. However, it still possible for it to be changed in the future
	Nil is defined as Bool for the sake of operator resolution (something to watch out for?)